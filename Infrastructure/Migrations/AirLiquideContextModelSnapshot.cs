// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AirLiquideContext))]
    partial class AirLiquideContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("French_CS_AI")
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AccountDepartment", b =>
                {
                    b.Property<int>("Account")
                        .HasColumnType("int");

                    b.Property<int>("Department")
                        .HasColumnType("int");

                    b.HasKey("Account", "Department");

                    b.HasIndex("Department");

                    b.ToTable("Account_Department", (string)null);
                });

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("RoleId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("UserId", "RoleId")
                        .HasName("PK_dbo.AspNetUserRoles");

                    b.HasIndex(new[] { "RoleId" }, "IX_RoleId");

                    b.HasIndex(new[] { "UserId" }, "IX_UserId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Domain.models.AccidentDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AccidentDateGmt")
                        .HasColumnType("datetime")
                        .HasColumnName("AccidentDateGMT");

                    b.Property<int?>("AccidentLocation")
                        .HasColumnType("int");

                    b.Property<string>("AccidentLocationFullName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<byte[]>("AccidentReportImg")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("AccidentReportRef")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<short?>("AccidentType")
                        .HasColumnType("smallint");

                    b.Property<int?>("Car")
                        .HasColumnType("int");

                    b.Property<int?>("Customer")
                        .HasColumnType("int");

                    b.Property<string>("Dammage")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("Details")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<int?>("Driver")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastGeneratedAlertByExternAppGmt")
                        .HasColumnType("datetime")
                        .HasColumnName("LastGeneratedAlertByExternAppGMT");

                    b.Property<short?>("Status")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("AccidentDetails");
                });

            modelBuilder.Entity("Domain.models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AdminAcc")
                        .HasColumnType("int");

                    b.Property<int>("Customer")
                        .HasColumnType("int");

                    b.Property<string>("DepName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<int?>("ExternalId")
                        .HasColumnType("int");

                    b.Property<int?>("ExternalId2")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastConnectionDateGmt")
                        .HasColumnType("datetime")
                        .HasColumnName("LastConnectionDateGMT");

                    b.Property<string>("LastConnectionInfo")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<short?>("MapZoomToFocusObjLevel")
                        .HasColumnType("smallint");

                    b.Property<short>("MinPeriodToDetectStpInS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)-1);

                    b.Property<double>("MinStopPeriodInS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(-1.0);

                    b.Property<long?>("OptionsConfig")
                        .HasColumnType("bigint");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("PasswordClr")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PasswordCrpt")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("ResellerJok")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<long?>("ShowedAlarmInRtcfg")
                        .HasColumnType("bigint")
                        .HasColumnName("ShowedAlarmInRTCfg");

                    b.Property<string>("TrackPageConfigStr")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<long?>("UitrackingPageConfig1")
                        .HasColumnType("bigint")
                        .HasColumnName("UITrackingPageConfig1");

                    b.Property<long?>("UitrackingPageConfig2")
                        .HasColumnType("bigint")
                        .HasColumnName("UITrackingPageConfig2");

                    b.Property<long?>("UitrackingPageConfig3")
                        .HasColumnType("bigint")
                        .HasColumnName("UITrackingPageConfig3");

                    b.Property<bool>("ViewAllTrackingObjects")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Customer");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("Domain.models.AccountEquipment", b =>
                {
                    b.Property<int>("Account")
                        .HasColumnType("int");

                    b.Property<string>("Equipment")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<bool>("AccessRight")
                        .HasColumnType("bit");

                    b.HasKey("Account", "Equipment");

                    b.ToTable("Account_Equipment", (string)null);
                });

            modelBuilder.Entity("Domain.models.AccountPage", b =>
                {
                    b.Property<int>("Account")
                        .HasColumnType("int");

                    b.Property<int>("PageId")
                        .HasColumnType("int")
                        .HasColumnName("Page_Id");

                    b.Property<bool>("AccessRight")
                        .HasColumnType("bit");

                    b.HasKey("Account", "PageId");

                    b.ToTable("Account_Page", (string)null);
                });

            modelBuilder.Entity("Domain.models.Alert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<short?>("AccelerationPosition")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("AcquisitionTime")
                        .HasColumnType("datetime");

                    b.Property<int>("AlertType")
                        .HasColumnType("int");

                    b.Property<short?>("AxleIndex")
                        .HasColumnType("smallint");

                    b.Property<short?>("AxleWeight")
                        .HasColumnType("smallint");

                    b.Property<int?>("Customer")
                        .HasColumnType("int");

                    b.Property<short?>("Direction")
                        .HasColumnType("smallint");

                    b.Property<int?>("Driver")
                        .HasColumnType("int");

                    b.Property<double?>("EngineHours")
                        .HasColumnType("float");

                    b.Property<short?>("EngineTemperature")
                        .HasColumnType("smallint");

                    b.Property<string>("Equipment")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<bool?>("EquipmentIsTrackingTarget")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<short?>("FuelLevel")
                        .HasColumnType("smallint");

                    b.Property<int?>("GeometricShape")
                        .HasColumnType("int");

                    b.Property<short?>("Gpslevel")
                        .HasColumnType("smallint")
                        .HasColumnName("GPSLevel");

                    b.Property<short?>("Gsmlevel")
                        .HasColumnType("smallint")
                        .HasColumnName("GSMLevel");

                    b.Property<double?>("HourCounterPompA")
                        .HasColumnType("float");

                    b.Property<double?>("HourCounterPompB")
                        .HasColumnType("float");

                    b.Property<double?>("HourCounterPompC")
                        .HasColumnType("float");

                    b.Property<double?>("HourCounterPompD")
                        .HasColumnType("float");

                    b.Property<double?>("HourCounterPompE")
                        .HasColumnType("float");

                    b.Property<double?>("HourCounterPompF")
                        .HasColumnType("float");

                    b.Property<bool?>("IgnOn")
                        .HasColumnType("bit");

                    b.Property<double?>("Intensity")
                        .HasColumnType("float");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Level1")
                        .HasColumnType("float");

                    b.Property<double?>("Level2")
                        .HasColumnType("float");

                    b.Property<double?>("Level3")
                        .HasColumnType("float");

                    b.Property<double?>("Level4")
                        .HasColumnType("float");

                    b.Property<double?>("Level5")
                        .HasColumnType("float");

                    b.Property<double?>("Level6")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Message")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<double?>("Mileage")
                        .HasColumnType("float");

                    b.Property<bool?>("OnMove")
                        .HasColumnType("bit");

                    b.Property<long?>("OtherInfo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<double?>("Pressure1")
                        .HasColumnType("float");

                    b.Property<double?>("Pressure2")
                        .HasColumnType("float");

                    b.Property<double?>("Pressure3")
                        .HasColumnType("float");

                    b.Property<double?>("Pressure4")
                        .HasColumnType("float");

                    b.Property<double?>("Pressure5")
                        .HasColumnType("float");

                    b.Property<double?>("Pressure6")
                        .HasColumnType("float");

                    b.Property<double?>("PressureC1a")
                        .HasColumnType("float")
                        .HasColumnName("pressureC1A");

                    b.Property<double?>("PressureC1v")
                        .HasColumnType("float")
                        .HasColumnName("pressureC1V");

                    b.Property<double?>("PressureC2a")
                        .HasColumnType("float")
                        .HasColumnName("pressureC2A");

                    b.Property<double?>("PressureC2v")
                        .HasColumnType("float")
                        .HasColumnName("pressureC2V");

                    b.Property<short?>("Rpm")
                        .HasColumnType("smallint")
                        .HasColumnName("RPM");

                    b.Property<string>("RunTrace")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<short>("Speed")
                        .HasColumnType("smallint");

                    b.Property<double?>("TempLocal")
                        .HasColumnType("float");

                    b.Property<double?>("TempPompA")
                        .HasColumnType("float");

                    b.Property<double?>("TempPompB")
                        .HasColumnType("float");

                    b.Property<double?>("TempPompC")
                        .HasColumnType("float");

                    b.Property<double?>("TempPompD")
                        .HasColumnType("float");

                    b.Property<double?>("TempPompE")
                        .HasColumnType("float");

                    b.Property<double?>("TempPompF")
                        .HasColumnType("float");

                    b.Property<short?>("Temperature")
                        .HasColumnType("smallint");

                    b.Property<double?>("Tension")
                        .HasColumnType("float");

                    b.Property<double?>("TotalFuel")
                        .HasColumnType("float");

                    b.Property<int?>("TrackingTarget")
                        .HasColumnType("int");

                    b.Property<double?>("Voie1")
                        .HasColumnType("float")
                        .HasColumnName("voie1");

                    b.Property<double?>("Voie2")
                        .HasColumnType("float")
                        .HasColumnName("voie2");

                    b.Property<double?>("Voie3")
                        .HasColumnType("float")
                        .HasColumnName("voie3");

                    b.Property<double?>("Voie4")
                        .HasColumnType("float")
                        .HasColumnName("voie4");

                    b.Property<double?>("Voie5")
                        .HasColumnType("float")
                        .HasColumnName("voie5");

                    b.Property<double?>("Voie6")
                        .HasColumnType("float")
                        .HasColumnName("voie6");

                    b.Property<double?>("Voie7")
                        .HasColumnType("float")
                        .HasColumnName("voie7");

                    b.Property<double?>("X")
                        .HasColumnType("float");

                    b.Property<int?>("Y")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id", "Customer" }, "IX_Alert_Id_Customer");

                    b.HasIndex(new[] { "AcquisitionTime", "Equipment", "AlertType" }, "IX_Alert_dt_eqp_type");

                    b.ToTable("Alert", (string)null);
                });

            modelBuilder.Entity("Domain.models.AlertClient", b =>
                {
                    b.Property<int?>("Customer")
                        .HasColumnType("int");

                    b.Property<int?>("LastAlertId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastExecutionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MachineName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .UseCollation("French_CI_AS");

                    b.ToTable("AlertClient", (string)null);
                });

            modelBuilder.Entity("Domain.models.AlertConfiguration", b =>
                {
                    b.Property<int>("AlertType")
                        .HasColumnType("int");

                    b.Property<string>("Equipment")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<bool>("NotifiedBySms")
                        .HasColumnType("bit")
                        .HasColumnName("NotifiedBySMS");

                    b.Property<string>("Param")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<bool>("Reported")
                        .HasColumnType("bit");

                    b.HasKey("AlertType", "Equipment");

                    b.ToTable("AlertConfiguration", (string)null);
                });

            modelBuilder.Entity("Domain.models.AlertType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.HasKey("Id");

                    b.ToTable("AlertType", (string)null);
                });

            modelBuilder.Entity("Domain.models.Anomaly", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnomalyType")
                        .HasColumnType("int");

                    b.Property<int?>("Customer")
                        .HasColumnType("int");

                    b.Property<string>("Equipment")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<DateTime>("GeneratedDateGmt")
                        .HasColumnType("datetime")
                        .HasColumnName("GeneratedDateGMT");

                    b.Property<bool?>("HaveIntervention")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastConnectionDateGmt")
                        .HasColumnType("datetime")
                        .HasColumnName("LastConnectionDateGMT");

                    b.Property<bool>("Resolved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ResolvedDateGmt")
                        .HasColumnType("datetime")
                        .HasColumnName("ResolvedDateGMT");

                    b.HasKey("Id");

                    b.ToTable("Anomaly", (string)null);
                });

            modelBuilder.Entity("Domain.models.Approbation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApprovingAcc")
                        .HasColumnType("int");

                    b.Property<int?>("ApprovingDep")
                        .HasColumnType("int");

                    b.Property<int?>("BenefIdAcc")
                        .HasColumnType("int");

                    b.Property<int?>("BenefIdDep")
                        .HasColumnType("int");

                    b.Property<int?>("BenefIdTt")
                        .HasColumnType("int")
                        .HasColumnName("BenefIdTT");

                    b.Property<int?>("Caller")
                        .HasColumnType("int");

                    b.Property<string>("Context")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .UseCollation("French_CI_AS");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("datetime");

                    b.Property<double?>("MaxCost")
                        .HasColumnType("float");

                    b.Property<string>("Object")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<int?>("Offer")
                        .HasColumnType("int");

                    b.Property<string>("Reference")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<DateTime?>("RequestDate")
                        .HasColumnType("datetime");

                    b.Property<short?>("State")
                        .HasColumnType("smallint");

                    b.Property<short?>("Type")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Approbation", (string)null);
                });

            modelBuilder.Entity("Domain.models.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id")
                        .HasName("PK_dbo.AspNetRoles");

                    b.HasIndex(new[] { "Name" }, "RoleNameIndex")
                        .IsUnique();

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Domain.models.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LockoutEndDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id")
                        .HasName("PK_dbo.AspNetUsers");

                    b.HasIndex(new[] { "UserName" }, "UserNameIndex")
                        .IsUnique();

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Domain.models.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id")
                        .HasName("PK_dbo.AspNetUserClaims");

                    b.HasIndex(new[] { "UserId" }, "IX_UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Domain.models.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("UserId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("LoginProvider", "ProviderKey", "UserId")
                        .HasName("PK_dbo.AspNetUserLogins");

                    b.HasIndex(new[] { "UserId" }, "IX_UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Domain.models.AutomaticReportMailConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Customer")
                        .HasColumnType("int");

                    b.Property<string>("Equipment")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<int?>("Mail")
                        .HasColumnType("int");

                    b.Property<int>("ReportType")
                        .HasColumnType("int");

                    b.Property<bool>("Send")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("AutomaticReportMailConfig", (string)null);
                });

            modelBuilder.Entity("Domain.models.BorrowedRentalCarContract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("ActivationCost")
                        .HasColumnType("float");

                    b.Property<DateTime?>("BeginStartRecurringDateGmt")
                        .HasColumnType("datetime")
                        .HasColumnName("BeginStartRecurringDateGMT");

                    b.Property<int?>("Car")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CarInDateGmt")
                        .HasColumnType("datetime")
                        .HasColumnName("CarInDateGMT");

                    b.Property<DateTime?>("CarOutDateGmt")
                        .HasColumnType("datetime")
                        .HasColumnName("CarOutDateGMT");

                    b.Property<short?>("Changed")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("ContractEndDateGmt")
                        .HasColumnType("datetime")
                        .HasColumnName("ContractEndDateGMT");

                    b.Property<string>("ContractRef")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<DateTime?>("ContractStartDateGmt")
                        .HasColumnType("datetime")
                        .HasColumnName("ContractStartDateGMT");

                    b.Property<short?>("ContractType")
                        .HasColumnType("smallint");

                    b.Property<double?>("Cost")
                        .HasColumnType("float");

                    b.Property<int?>("Customer")
                        .HasColumnType("int");

                    b.Property<bool?>("EnableAlertEndRenewContractConfirmedByWt")
                        .HasColumnType("bit")
                        .HasColumnName("EnableAlertEndRenewContractConfirmedByWT");

                    b.Property<bool?>("EnableAlertForEndRenewContractByApp")
                        .HasColumnType("bit");

                    b.Property<bool?>("EnableGenerateAlertPayementExpiredByExternApp")
                        .HasColumnType("bit");

                    b.Property<bool?>("EnableGenerateAlertPaymentExpiredByWt")
                        .HasColumnType("bit")
                        .HasColumnName("EnableGenerateAlertPaymentExpiredByWT");

                    b.Property<DateTime?>("EndRenewedDateGmt")
                        .HasColumnType("datetime")
                        .HasColumnName("EndRenewedDateGMT");

                    b.Property<DateTime?>("ExpiryDatePaymentGmtforExernApp")
                        .HasColumnType("datetime")
                        .HasColumnName("ExpiryDatePaymentGMTForExernApp");

                    b.Property<DateTime?>("ExpiryDatePaymentGmtforWt")
                        .HasColumnType("datetime")
                        .HasColumnName("ExpiryDatePaymentGMTForWT");

                    b.Property<int?>("FirstDriver")
                        .HasColumnType("int");

                    b.Property<int?>("GazFuelLevelPercent")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastConfirmedAlertPayementByWtgmt")
                        .HasColumnType("datetime")
                        .HasColumnName("LastConfirmedAlertPayementByWTGMT");

                    b.Property<DateTime?>("LastGeneratedAlertEndRenewConfirmedByWt")
                        .HasColumnType("datetime")
                        .HasColumnName("LastGeneratedAlertEndRenewConfirmedByWT");

                    b.Property<DateTime?>("LastGenratedAlertEndRenewContractByApp")
                        .HasColumnType("datetime");

                    b.Property<double?>("OdometerInKm")
                        .HasColumnType("float");

                    b.Property<double?>("OdometerOutKm")
                        .HasColumnType("float");

                    b.Property<double?>("RecurringCost")
                        .HasColumnType("float");

                    b.Property<int?>("RecurringDateConfig")
                        .HasColumnType("int");

                    b.Property<int?>("SecondDriver")
                        .HasColumnType("int");

                    b.Property<double?>("WarnMeBeforeNday")
                        .HasColumnType("float")
                        .HasColumnName("WarnMeBeforeNDay");

                    b.HasKey("Id");

                    b.ToTable("BorrowedRentalCarContract", (string)null);
                });

            modelBuilder.Entity("Domain.models.BorrowedRentalCarInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BorrowedRentalCarContract")
                        .HasColumnType("int");

                    b.Property<int?>("Car")
                        .HasColumnType("int");

                    b.Property<short?>("ContratType")
                        .HasColumnType("smallint");

                    b.Property<double?>("Cost")
                        .HasColumnType("float");

                    b.Property<DateTime?>("DateInvoiceGmt")
                        .HasColumnType("datetime")
                        .HasColumnName("DateInvoiceGMT");

                    b.Property<int?>("FirstDriver")
                        .HasColumnType("int");

                    b.Property<DateTime?>("InvoiceFromGmt")
                        .HasColumnType("datetime")
                        .HasColumnName("InvoiceFromGMT");

                    b.Property<string>("InvoiceRef")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<DateTime?>("InvoiceToGmt")
                        .HasColumnType("datetime")
                        .HasColumnName("InvoiceToGMT");

                    b.Property<double?>("OdometerInKm")
                        .HasColumnType("float");

                    b.Property<double?>("OdometerOutKm")
                        .HasColumnType("float");

                    b.Property<double?>("PaidCost")
                        .HasColumnType("float");

                    b.Property<DateTime?>("PaidDateGmt")
                        .HasColumnType("datetime")
                        .HasColumnName("PaidDateGMT");

                    b.Property<int?>("SecondDriver")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BorrowedRentalCarInvoice", (string)null);
                });

            modelBuilder.Entity("Domain.models.BtSmsEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DateEnvoi")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("DateInsertion")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("Destinataire")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("EtatEnvoie")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("HeurEnvoi")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("HeurInsertion")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("TextAlerte")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .UseCollation("French_CI_AS");

                    b.Property<int?>("TypeAlerte")
                        .HasColumnType("int");

                    b.Property<string>("TypeMessage")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .UseCollation("French_CI_AS");

                    b.HasKey("Id");

                    b.ToTable("BtSmsEmails");
                });

            modelBuilder.Entity("Domain.models.BuscandataOld", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AcquisitionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Equipment")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.HasKey("Id")
                        .HasName("PK_BUSCANData");

                    b.ToTable("BUSCANDataOLd", (string)null);
                });

            modelBuilder.Entity("Domain.models.Car", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("AdcUse")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ADC_Use")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("CarType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<int?>("DriverId")
                        .HasColumnType("int");

                    b.Property<double?>("EmptyVoltage")
                        .HasColumnType("float");

                    b.Property<short?>("FuelContainerCapacity")
                        .HasColumnType("smallint");

                    b.Property<double?>("FuelEstimation")
                        .HasColumnType("float");

                    b.Property<int?>("FuelType")
                        .HasColumnType("int");

                    b.Property<double?>("FullVoltage")
                        .HasColumnType("float");

                    b.Property<string>("Matricule")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<int?>("Model")
                        .HasColumnType("int");

                    b.Property<int?>("ModelYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Car", (string)null);
                });

            modelBuilder.Entity("Domain.models.CarDocumentLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Car")
                        .HasColumnType("int");

                    b.Property<int?>("CarDocumentReminder")
                        .HasColumnType("int");

                    b.Property<double?>("Cost")
                        .HasColumnType("float");

                    b.Property<int?>("Customer")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateAvailableFromGmt")
                        .HasColumnType("datetime")
                        .HasColumnName("DateAvailableFromGMT");

                    b.Property<DateTime?>("DateAvailableToGmt")
                        .HasColumnType("datetime")
                        .HasColumnName("DateAvailableToGMT");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<short?>("DocumentType")
                        .HasColumnType("smallint");

                    b.Property<string>("InvoiceReference")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<double?>("PaidCost")
                        .HasColumnType("float");

                    b.Property<DateTime?>("PaidDateGmt")
                        .HasColumnType("datetime")
                        .HasColumnName("PaidDateGMT");

                    b.Property<string>("Supplier")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.HasKey("Id");

                    b.ToTable("CarDocumentLog", (string)null);
                });

            modelBuilder.Entity("Domain.models.CarDocumentReminder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("ActivationCost")
                        .HasColumnType("float");

                    b.Property<DateTime?>("BeginStartRecurringDateGmt")
                        .HasColumnType("datetime")
                        .HasColumnName("BeginStartRecurringDateGMT");

                    b.Property<int?>("Car")
                        .HasColumnType("int");

                    b.Property<short?>("Changed")
                        .HasColumnType("smallint");

                    b.Property<int?>("Customer")
                        .HasColumnType("int");

                    b.Property<short?>("DocumentType")
                        .HasColumnType("smallint");

                    b.Property<bool?>("EnableGenerateAlertByExternApp")
                        .HasColumnType("bit");

                    b.Property<bool?>("EnableGenerateAlertByWt")
                        .HasColumnType("bit")
                        .HasColumnName("EnableGenerateAlertByWT");

                    b.Property<short?>("ExpenditureType")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("ExpiryDateGmtforExernApp")
                        .HasColumnType("datetime")
                        .HasColumnName("ExpiryDateGMTForExernApp");

                    b.Property<DateTime?>("ExpiryDateGmtforWt")
                        .HasColumnType("datetime")
                        .HasColumnName("ExpiryDateGMTForWT");

                    b.Property<DateTime?>("LastConfirmedAlertByWtgmt")
                        .HasColumnType("datetime")
                        .HasColumnName("LastConfirmedAlertByWTGMT");

                    b.Property<DateTime?>("LastDueDateGmt")
                        .HasColumnType("datetime")
                        .HasColumnName("LastDueDateGMT");

                    b.Property<DateTime?>("LastGenerateAlertByExternAppGmt")
                        .HasColumnType("datetime")
                        .HasColumnName("LastGenerateAlertByExternAppGMT");

                    b.Property<double?>("RecurringCost")
                        .HasColumnType("float");

                    b.Property<int?>("RecurringDateConfig")
                        .HasColumnType("int");

                    b.Property<double?>("WarnMeBeforeNday")
                        .HasColumnType("float")
                        .HasColumnName("WarnMeBeforeNDay");

                    b.HasKey("Id");

                    b.ToTable("CarDocumentReminder", (string)null);
                });

            modelBuilder.Entity("Domain.models.CardCoupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Car")
                        .HasColumnType("int");

                    b.Property<string>("CardCouponRef")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<int?>("Customer")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateGmt")
                        .HasColumnType("datetime")
                        .HasColumnName("DateGMT");

                    b.Property<int?>("Department")
                        .HasColumnType("int");

                    b.Property<int?>("Driver")
                        .HasColumnType("int");

                    b.Property<bool?>("EnableAlert")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCard")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCardCouponWorkByMoney")
                        .HasColumnType("bit");

                    b.Property<double?>("PricePerL")
                        .HasColumnType("float");

                    b.Property<double?>("QuantityL")
                        .HasColumnType("float");

                    b.Property<int?>("RecurringLoadConfig")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierFuel")
                        .HasColumnType("int");

                    b.Property<int?>("Tank")
                        .HasColumnType("int");

                    b.Property<double?>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("CardCoupon", (string)null);
                });

            modelBuilder.Entity("Domain.models.CardCouponLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Car")
                        .HasColumnType("int");

                    b.Property<int?>("CardCoupon")
                        .HasColumnType("int");

                    b.Property<int?>("Customer")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<int?>("Driver")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ForMissionEndDateGmt")
                        .HasColumnType("datetime")
                        .HasColumnName("ForMissionEndDateGMT");

                    b.Property<DateTime?>("ForMissionStartDateGmt")
                        .HasColumnType("datetime")
                        .HasColumnName("ForMissionStartDateGMT");

                    b.Property<double?>("PricePerL")
                        .HasColumnType("float");

                    b.Property<double?>("QuantityL")
                        .HasColumnType("float");

                    b.Property<short?>("Status")
                        .HasColumnType("smallint");

                    b.Property<int?>("Tank")
                        .HasColumnType("int");

                    b.Property<double?>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("CardCouponLog", (string)null);
                });

            modelBuilder.Entity("Domain.models.CardCouponReminder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("BeginStartRecurringDateGmt")
                        .HasColumnType("datetime")
                        .HasColumnName("BeginStartRecurringDateGMT");

                    b.Property<int?>("CardCoupon")
                        .HasColumnType("int");

                    b.Property<short?>("Changed")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("CreatedReminderDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Customer")
                        .HasColumnType("int");

                    b.Property<int?>("Driver")
                        .HasColumnType("int");

                    b.Property<bool?>("EnableGenerateAlertByExternApp")
                        .HasColumnType("bit");

                    b.Property<bool?>("EnableGenerateAlertByWt")
                        .HasColumnType("bit")
                        .HasColumnName("EnableGenerateAlertByWT");

                    b.Property<DateTime?>("ExpiredDateGmt")
                        .HasColumnType("datetime")
                        .HasColumnName("ExpiredDateGMT");

                    b.Property<DateTime?>("ExpiryDateGmtforExernApp")
                        .HasColumnType("datetime")
                        .HasColumnName("ExpiryDateGMTForExernApp");

                    b.Property<DateTime?>("LastConfirmedAlertByWtgmt")
                        .HasColumnType("datetime")
                        .HasColumnName("LastConfirmedAlertByWTGMT");

                    b.Property<DateTime?>("LastGenerateAlertByExternAppGmt")
                        .HasColumnType("datetime")
                        .HasColumnName("LastGenerateAlertByExternAppGMT");

                    b.Property<int?>("RecurringLoadConfig")
                        .HasColumnType("int");

                    b.Property<double?>("RecurringQuantityInL")
                        .HasColumnType("float");

                    b.Property<double?>("WarnMeBeforNday")
                        .HasColumnType("float")
                        .HasColumnName("WarnMeBeforNDay");

                    b.HasKey("Id");

                    b.ToTable("CardCouponReminder", (string)null);
                });

            modelBuilder.Entity("Domain.models.Cclscommand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("Hcs")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("HCS")
                        .UseCollation("French_CI_AS");

                    b.Property<DateTime?>("PostingTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Response")
                        .HasColumnType("text")
                        .UseCollation("French_CI_AS");

                    b.Property<int?>("State")
                        .HasColumnType("int");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Wt")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("WT")
                        .UseCollation("French_CI_AS");

                    b.HasKey("Id");

                    b.ToTable("CCLSCommand", (string)null);
                });

            modelBuilder.Entity("Domain.models.Changement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .UseCollation("French_CI_AS");

                    b.Property<int?>("IntId")
                        .HasColumnType("int");

                    b.Property<string>("ObjectName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("OperationType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<DateTime?>("PostingTime")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("StringId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.HasKey("Id");

                    b.ToTable("Changement", (string)null);
                });

            modelBuilder.Entity("Domain.models.Changement2", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("IntId")
                        .HasColumnType("int");

                    b.Property<string>("ObjectName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("OperationType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<DateTime?>("PostingTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Source")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("StringId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.HasKey("Id");

                    b.ToTable("Changement2", (string)null);
                });

            modelBuilder.Entity("Domain.models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountsCount")
                        .HasColumnType("int");

                    b.Property<string>("Adress")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<short?>("AuthorizedSmscount")
                        .HasColumnType("smallint")
                        .HasColumnName("AuthorizedSMSCount");

                    b.Property<short?>("AutoLockCtmByResInDay")
                        .HasColumnType("smallint");

                    b.Property<short?>("AutoLockCtmByTnvInDay")
                        .HasColumnType("smallint");

                    b.Property<short?>("AutoShowMsg4PaymentInvoiceByResInDay")
                        .HasColumnType("smallint");

                    b.Property<short?>("AutoShowMsg4PaymentInvoiceByTnvInDay")
                        .HasColumnType("smallint");

                    b.Property<bool?>("CanAddCars")
                        .HasColumnType("bit");

                    b.Property<short?>("CarCount")
                        .HasColumnType("smallint");

                    b.Property<short?>("ClientCommServerCount")
                        .HasColumnType("smallint");

                    b.Property<short?>("ConditionalSpeedForcedArmKmh")
                        .HasColumnType("smallint");

                    b.Property<long?>("Config")
                        .HasColumnType("bigint");

                    b.Property<short?>("CultureInfo")
                        .HasColumnType("smallint");

                    b.Property<int?>("CustomerStatus")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateInsert")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateUpdate")
                        .HasColumnType("datetime");

                    b.Property<string>("DownloadPassword")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("Email1")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("Email2")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("Email3")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ExpirationDateForResellerGmt")
                        .HasColumnType("datetime")
                        .HasColumnName("ExpirationDateForResellerGMT");

                    b.Property<string>("Fax")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<int?>("FirstReseller")
                        .HasColumnType("int");

                    b.Property<short?>("Gmt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("GMT");

                    b.Property<bool?>("IsReseller")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastConnectionDateGmt")
                        .HasColumnType("datetime")
                        .HasColumnName("LastConnectionDateGMT");

                    b.Property<string>("LastConnectionInfo")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .UseCollation("French_CI_AS");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("MachineInsert")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MachineUpdate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Map")
                        .HasColumnType("int");

                    b.Property<string>("MessageToShow")
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<int?>("NbrEq")
                        .HasColumnType("int");

                    b.Property<int?>("NbrEqConnectedFromXtime")
                        .HasColumnType("int")
                        .HasColumnName("NbrEqConnectedFromXTime");

                    b.Property<int?>("NbrEqDisconnectedMoreThanXtime")
                        .HasColumnType("int")
                        .HasColumnName("NbrEqDisconnectedMoreThanXTime");

                    b.Property<int?>("Reseller")
                        .HasColumnType("int");

                    b.Property<string>("SiteName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<DateTime?>("SubscriptionDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("SupportStatus")
                        .HasColumnType("bigint");

                    b.Property<string>("Tel1")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("Tel2")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("Tel3")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<short?>("TimeOutToSendCommandMn")
                        .HasColumnType("smallint");

                    b.Property<string>("TimeZone")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("URL")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("UserInsert")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserUpdate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<int?>("WinTraceCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("Domain.models.CustomerInput", b =>
                {
                    b.Property<int>("Customer")
                        .HasColumnType("int");

                    b.Property<int>("Input")
                        .HasColumnType("int");

                    b.Property<int?>("ExternalId")
                        .HasColumnType("int");

                    b.Property<int>("InputOption")
                        .HasColumnType("int");

                    b.HasKey("Customer", "Input");

                    b.ToTable("Customer_Inputs", (string)null);
                });

            modelBuilder.Entity("Domain.models.CustomerJocker", b =>
                {
                    b.Property<int>("Customer")
                        .HasColumnType("int");

                    b.Property<int?>("Account")
                        .HasColumnType("int");

                    b.HasKey("Customer");

                    b.ToTable("Customer_Jocker", (string)null);
                });

            modelBuilder.Entity("Domain.models.CustomerLicence", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateContractWorkForce")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateContractWt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateExpireWorkForce")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateExpireWt")
                        .HasColumnType("datetime");

                    b.Property<int?>("NumberEquipement")
                        .HasColumnType("int");

                    b.Property<int?>("Scenario")
                        .HasColumnType("int");

                    b.Property<int?>("SendAlert")
                        .HasColumnType("int");

                    b.Property<int?>("SubResellerName")
                        .HasColumnType("int");

                    b.Property<int?>("SubscriptionFormula")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TimeRenewSubscription")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("WarrantyDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("WarrantyPeriod")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CustomerLicence", (string)null);
                });

            modelBuilder.Entity("Domain.models.CustomerOperationLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Account")
                        .HasColumnType("int");

                    b.Property<int?>("Customer")
                        .HasColumnType("int");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("LoginAccount")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("NewValue")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("OldValue")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<DateTime?>("OperationDateGmt")
                        .HasColumnType("datetime");

                    b.Property<int?>("OperationType")
                        .HasColumnType("int");

                    b.Property<string>("OtherInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("French_CI_AS");

                    b.HasKey("Id");

                    b.ToTable("CustomerOperationLog", (string)null);
                });

            modelBuilder.Entity("Domain.models.CustomerStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.HasKey("Id");

                    b.ToTable("CustomerStatus", (string)null);
                });

            modelBuilder.Entity("Domain.models.DateTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateStandardTest")
                        .HasColumnType("datetime");

                    b.HasKey("Id")
                        .HasName("PK_LastTest");

                    b.ToTable("DateTest", (string)null);
                });

            modelBuilder.Entity("Domain.models.Delegation", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("GovId")
                        .HasColumnType("int")
                        .HasColumnName("Gov_Id");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .UseCollation("French_CI_AS");

                    b.Property<double?>("TheButtom")
                        .HasColumnType("float");

                    b.Property<double?>("TheLeft")
                        .HasColumnType("float");

                    b.Property<double?>("TheRight")
                        .HasColumnType("float");

                    b.Property<double?>("TheTop")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Delegation", (string)null);
                });

            modelBuilder.Entity("Domain.models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Customer")
                        .HasColumnType("int");

                    b.Property<int?>("ExternalId")
                        .HasColumnType("int");

                    b.Property<int?>("ExternalId2")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.HasKey("Id");

                    b.HasIndex("Customer");

                    b.ToTable("Department", (string)null);
                });

            modelBuilder.Entity("Domain.models.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Department")
                        .HasColumnType("int");

                    b.Property<string>("DriverCode")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<int>("ExternalId")
                        .HasColumnType("int");

                    b.Property<int?>("ExternalId2")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("FixTelphoneNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("MobileTelephoneNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.HasKey("Id");

                    b.HasIndex("Department");

                    b.ToTable("Driver", (string)null);
                });

            modelBuilder.Entity("Domain.models.DriverEquipmentCode", b =>
                {
                    b.Property<string>("Equipment")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<byte>("CodeIndex")
                        .HasColumnType("tinyint");

                    b.Property<int?>("Driver")
                        .HasColumnType("int");

                    b.HasKey("Equipment", "CodeIndex")
                        .HasName("PK_DriverCode");

                    b.HasIndex("Driver");

                    b.ToTable("DriverEquipmentCode", (string)null);
                });

            modelBuilder.Entity("Domain.models.Equipment", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<double?>("BaseMileageKm")
                        .HasColumnType("float");

                    b.Property<int?>("CalibrationTank")
                        .HasColumnType("int");

                    b.Property<string>("ClonedSerialNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("CommServer")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<int?>("Customer")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateContract")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateFirstSend")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateInsert")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateUpdate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DistanceForOutOfCntry")
                        .HasColumnType("int");

                    b.Property<short?>("EmptyFuelVoltageLevelMv")
                        .HasColumnType("smallint")
                        .HasColumnName("EmptyFuelVoltageLevelMV");

                    b.Property<bool?>("EnableLogging")
                        .HasColumnType("bit");

                    b.Property<short?>("EngineTemperatureThreshold")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)-1);

                    b.Property<int>("EquipmentStatus")
                        .HasColumnType("int");

                    b.Property<string>("EquipmentType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<short?>("ExceedDrivingTimeDetectionThresholdInSec")
                        .HasColumnType("smallint");

                    b.Property<string>("FirmVersion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("ForwardingIp")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .UseCollation("French_CI_AS");

                    b.Property<int?>("ForwardingPort")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<double?>("FuelConsumptionThreshold")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<short?>("FuelContainerCapacity")
                        .HasColumnType("smallint");

                    b.Property<double?>("FuelLevelCorrectionInPercent")
                        .HasColumnType("float");

                    b.Property<short?>("FuelLevelPercent4FillingAlarm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)-1);

                    b.Property<short?>("FuelLevelPercentForStolenAlarm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)-1);

                    b.Property<short?>("FullFuelVoltageLevelMv")
                        .HasColumnType("smallint")
                        .HasColumnName("FullFuelVoltageLevelMV");

                    b.Property<long?>("HardwareConfig")
                        .HasColumnType("bigint");

                    b.Property<string>("InAreaDuringPeriodParam")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("InOutOfWayDuringPeriodParam")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .UseCollation("French_CI_AS");

                    b.Property<short?>("IntOutTempRangeMode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)2);

                    b.Property<int>("LongStopDetectionThresholdInSec")
                        .HasColumnType("int");

                    b.Property<short?>("LowFuelLevelInPercentAlarm")
                        .HasColumnType("smallint");

                    b.Property<string>("MachineInsert")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MachineUpdate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("MaxAcceptedFuelLevelInPercent")
                        .HasColumnType("float");

                    b.Property<short?>("MaxTemperatureVoltageLevelMv")
                        .HasColumnType("smallint")
                        .HasColumnName("MaxTemperatureVoltageLevelMV");

                    b.Property<double?>("MileageCorrection")
                        .HasColumnType("float");

                    b.Property<short?>("MinTemperatureVoltageLevelMv")
                        .HasColumnType("smallint")
                        .HasColumnName("MinTemperatureVoltageLevelMV");

                    b.Property<short?>("OverSpeedEnterDelayInS")
                        .HasColumnType("smallint");

                    b.Property<short?>("OverSpeedKmThresholdAlarm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)-1);

                    b.Property<short?>("OverspeedMarginOnNetworkRoadKmh")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<string>("PasswordDevice")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<short?>("Port")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<bool?>("ResetedByTnv")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("ResetedByTNV");

                    b.Property<short?>("Rpmthreshold")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)-1)
                        .HasColumnName("RPMThreshold");

                    b.Property<bool>("SavingIgnitionAlert")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ServerIp")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ServerIP")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("SimCardIccidnumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("SimCardICCIDNumber")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("SimcardNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SIMCardNumber")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("SimcardSerialNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SIMCardSerialNumber")
                        .UseCollation("French_CI_AS");

                    b.Property<double?>("SpeedToDetectMvtKmHinSpeedMethod")
                        .HasColumnType("float")
                        .HasColumnName("SpeedToDetectMvtKmHInSpeedMethod");

                    b.Property<short?>("StationaryPeriodWhenAccOffS")
                        .HasColumnType("smallint");

                    b.Property<short?>("StationaryPeriodWhenAccOnS")
                        .HasColumnType("smallint");

                    b.Property<bool?>("SupportSendArmingWhenOutOfCntry")
                        .HasColumnType("bit");

                    b.Property<double?>("SurconsuptionGprspercentage")
                        .HasColumnType("float")
                        .HasColumnName("SurconsuptionGPRSPercentage");

                    b.Property<short?>("TemperatureMax")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)-1);

                    b.Property<short?>("TemperatureMin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)-1);

                    b.Property<short?>("TotalBytesForfait")
                        .HasColumnType("smallint");

                    b.Property<bool>("TrackingActive")
                        .HasColumnType("bit");

                    b.Property<short?>("TrackingMvtPeriodInS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<short?>("TrackingPrdToSendAcquiredPosInS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<short?>("TrackingStpPeriodInS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<string>("UserInsert")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserUpdate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("VeryLowFuelLevelInPercentAlarm")
                        .HasColumnType("smallint");

                    b.HasKey("SerialNumber")
                        .HasName("PK_Equipment_1");

                    b.HasIndex("Customer");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("Domain.models.EquipmentLicence", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<DateTime?>("DateContract")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateDeliveryOrder")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateEquipmentAllocation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateInvoice")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateUpService")
                        .HasColumnType("datetime");

                    b.Property<string>("NumDeliveryOrder")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("NumInvoice")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("SerialBoxEquipment")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<int?>("SerialPuce")
                        .HasColumnType("int");

                    b.HasKey("SerialNumber")
                        .HasName("PK_EquipementLicence");

                    b.ToTable("EquipmentLicence", (string)null);
                });

            modelBuilder.Entity("Domain.models.EquipmentOperationLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Account")
                        .HasColumnType("int");

                    b.Property<int?>("Customer")
                        .HasColumnType("int");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<int?>("Equipment")
                        .HasColumnType("int");

                    b.Property<string>("EquipmentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("LoginAccount")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("NewValue")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("OldValue")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<DateTime?>("OperationDateGmt")
                        .HasColumnType("datetime");

                    b.Property<int?>("OperationType")
                        .HasColumnType("int");

                    b.Property<string>("OtherInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("French_CI_AS");

                    b.HasKey("Id");

                    b.ToTable("EquipmentOperationLog", (string)null);
                });

            modelBuilder.Entity("Domain.models.EquipmentStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.HasKey("Id");

                    b.ToTable("EquipmentStatus", (string)null);
                });

            modelBuilder.Entity("Domain.models.EquipmentType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("French_CI_AS");

                    b.HasKey("Id");

                    b.ToTable("EquipmentType", (string)null);
                });

            modelBuilder.Entity("Domain.models.G1", b =>
                {
                    b.Property<double?>("Acceleration")
                        .HasColumnType("float");

                    b.Property<int?>("AccelerationPosition")
                        .HasColumnType("int");

                    b.Property<DateTime>("AcquisitionTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("AdcVoltage")
                        .HasColumnType("int")
                        .HasColumnName("ADC_Voltage");

                    b.Property<int?>("AnalogInput1")
                        .HasColumnType("int");

                    b.Property<int?>("AnalogInput2")
                        .HasColumnType("int");

                    b.Property<int?>("AnalogInput3")
                        .HasColumnType("int");

                    b.Property<int?>("AnalogInput4")
                        .HasColumnType("int");

                    b.Property<int?>("AxleIndex")
                        .HasColumnType("int");

                    b.Property<int?>("AxleWeight")
                        .HasColumnType("int");

                    b.Property<int?>("Customer")
                        .HasColumnType("int");

                    b.Property<short>("Direction")
                        .HasColumnType("smallint");

                    b.Property<double?>("EngineHours")
                        .HasColumnType("float");

                    b.Property<int?>("EngineTemperature")
                        .HasColumnType("int");

                    b.Property<string>("Equipment")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<short?>("FuelLevel")
                        .HasColumnType("smallint");

                    b.Property<short?>("Gpslevel")
                        .HasColumnType("smallint")
                        .HasColumnName("GPSLevel");

                    b.Property<short?>("Gsmlevel")
                        .HasColumnType("smallint")
                        .HasColumnName("GSMLevel");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<bool?>("IgnOn")
                        .HasColumnType("bit");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Message")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<double?>("Mileage")
                        .HasColumnType("float");

                    b.Property<bool?>("OnMove")
                        .HasColumnType("bit");

                    b.Property<string>("OriginalEquipment")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<long?>("OtherInfo")
                        .HasColumnType("bigint");

                    b.Property<int>("RecordType")
                        .HasColumnType("int");

                    b.Property<int?>("Rpm")
                        .HasColumnType("int")
                        .HasColumnName("RPM");

                    b.Property<short>("Speed")
                        .HasColumnType("smallint");

                    b.Property<long>("Status")
                        .HasColumnType("bigint");

                    b.Property<string>("TachographData")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<double?>("Temperature")
                        .HasColumnType("float");

                    b.Property<short>("Temperature0")
                        .HasColumnType("smallint");

                    b.Property<double?>("TotalFuel")
                        .HasColumnType("float");

                    b.Property<string>("VehiculeWeight")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<double?>("X")
                        .HasColumnType("float");

                    b.Property<double?>("Y")
                        .HasColumnType("float");

                    b.ToTable((string)null);

                    b.ToView("g1", (string)null);
                });

            modelBuilder.Entity("Domain.models.Gaequipment", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("AuthorizedNumberForSilentCall")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("AuthorizedNumberForSosCall")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("AuthorizedNumberForSOS_Call")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("AuthorizedNumberForSosSms")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("AuthorizedNumberForSOS_SMS")
                        .UseCollation("French_CI_AS");

                    b.Property<bool?>("AutomaticHangUpToCall")
                        .HasColumnType("bit");

                    b.Property<bool?>("BuzzerWhenIncomingCall")
                        .HasColumnType("bit");

                    b.Property<short?>("CourceChange")
                        .HasColumnType("smallint");

                    b.Property<double?>("FixedMovingDistance")
                        .HasColumnType("float");

                    b.Property<bool?>("GeofenceIn")
                        .HasColumnType("bit");

                    b.Property<string>("GeofenceName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<bool?>("InterpretAsNormalText")
                        .HasColumnType("bit");

                    b.Property<short?>("KeepAlivePeriod")
                        .HasColumnType("smallint");

                    b.Property<string>("LowerLeft")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<short?>("OverSpeedDetectionThreshold")
                        .HasColumnType("smallint");

                    b.Property<short?>("Port")
                        .HasColumnType("smallint");

                    b.Property<bool?>("ReplayBySmsAfterCall")
                        .HasColumnType("bit");

                    b.Property<bool?>("SendAlarmWhenLedStopFlashing")
                        .HasColumnType("bit");

                    b.Property<bool?>("SendAlarmWhenTrackerOn")
                        .HasColumnType("bit");

                    b.Property<bool?>("SendExtraPowerRemoved")
                        .HasColumnType("bit");

                    b.Property<bool?>("SendGpsblindAreaAlarm")
                        .HasColumnType("bit")
                        .HasColumnName("SendGPSBlindAreaAlarm");

                    b.Property<string>("ServerIp")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ServerIP")
                        .UseCollation("French_CI_AS");

                    b.Property<bool?>("SleepModeActive")
                        .HasColumnType("bit");

                    b.Property<short?>("SquareArea")
                        .HasColumnType("smallint");

                    b.Property<bool?>("SupportCourseChange")
                        .HasColumnType("bit");

                    b.Property<bool?>("SupportSosalarm")
                        .HasColumnType("bit")
                        .HasColumnName("SupportSOSAlarm");

                    b.Property<short?>("TrackingPeriod")
                        .HasColumnType("smallint");

                    b.Property<string>("UpperRight")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.HasKey("SerialNumber");

                    b.ToTable("GAEquipment", (string)null);
                });

            modelBuilder.Entity("Domain.models.GeofenceArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<double>("DownLatitude")
                        .HasColumnType("float")
                        .HasColumnName("Down_Latitude");

                    b.Property<string>("Equipment")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<int?>("ExternalId")
                        .HasColumnType("int");

                    b.Property<int?>("ExternalId2")
                        .HasColumnType("int");

                    b.Property<double>("LeftLongitude")
                        .HasColumnType("float")
                        .HasColumnName("Left_Longitude");

                    b.Property<short>("Mode")
                        .HasColumnType("smallint");

                    b.Property<double>("RightLongitude")
                        .HasColumnType("float")
                        .HasColumnName("Right_Longitude");

                    b.Property<double>("UpLatitude")
                        .HasColumnType("float")
                        .HasColumnName("Up_Latitude");

                    b.HasKey("Id");

                    b.HasIndex("Equipment");

                    b.ToTable("GeofenceArea", (string)null);
                });

            modelBuilder.Entity("Domain.models.GeofenceCircle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<short?>("AlarmType")
                        .HasColumnType("smallint");

                    b.Property<short>("CircleIndex")
                        .HasColumnType("smallint");

                    b.Property<string>("CircleName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("Equipment")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<int?>("ExternalId")
                        .HasColumnType("int");

                    b.Property<int?>("ExternalId2")
                        .HasColumnType("int");

                    b.Property<double?>("LatOrigin")
                        .HasColumnType("float");

                    b.Property<double?>("LngOrigin")
                        .HasColumnType("float");

                    b.Property<bool>("OnOff")
                        .HasColumnType("bit");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<double>("Radius")
                        .HasColumnType("float");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Equipment");

                    b.ToTable("GeofenceCircle", (string)null);
                });

            modelBuilder.Entity("Domain.models.GeofenceRectangle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DownLeft")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("Equipment")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<int?>("ExternalId")
                        .HasColumnType("int");

                    b.Property<int?>("ExternalId2")
                        .HasColumnType("int");

                    b.Property<bool>("OnOff")
                        .HasColumnType("bit");

                    b.Property<short>("RectangleIndex")
                        .HasColumnType("smallint");

                    b.Property<string>("RectangleName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("UpRight")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.HasKey("Id");

                    b.HasIndex("Equipment");

                    b.ToTable("GeofenceRectangle", (string)null);
                });

            modelBuilder.Entity("Domain.models.GeofenceRectangleNew", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DownRight")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("Equipment")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<int?>("ExternalId")
                        .HasColumnType("int");

                    b.Property<int?>("NewId")
                        .HasColumnType("int");

                    b.Property<short>("RectangleIndex")
                        .HasColumnType("smallint");

                    b.Property<string>("RectangleName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("TopLeft")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.HasKey("Id");

                    b.HasIndex("Equipment");

                    b.ToTable("GeofenceRectangleNew", (string)null);
                });

            modelBuilder.Entity("Domain.models.GeometricShape", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Account")
                        .HasColumnType("int");

                    b.Property<int?>("ArgbLineColor")
                        .HasColumnType("int");

                    b.Property<short?>("Changed")
                        .HasColumnType("smallint");

                    b.Property<int?>("ExternalId")
                        .HasColumnType("int");

                    b.Property<int?>("ExternalId2")
                        .HasColumnType("int");

                    b.Property<short?>("LineWidth")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .UseCollation("French_CI_AS");

                    b.HasKey("Id");

                    b.ToTable("GeometricShape", (string)null);
                });

            modelBuilder.Entity("Domain.models.Ggequipment", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("AuhthorizedNumber1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("AuhthorizedNumber2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("AuhthorizedNumber3")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<short?>("TrackingPeriodInS")
                        .HasColumnType("smallint");

                    b.HasKey("SerialNumber");

                    b.ToTable("GGEquipment", (string)null);
                });

            modelBuilder.Entity("Domain.models.Glequipment", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("CallSimNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<short>("DataPeriod")
                        .HasColumnType("smallint");

                    b.Property<string>("EquipmentSimNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<short>("HiddenAntennaDetectionDelay")
                        .HasColumnType("smallint");

                    b.Property<long>("Identifier")
                        .HasColumnType("bigint");

                    b.Property<short>("MotionDetectionDelay")
                        .HasColumnType("smallint");

                    b.Property<short>("MotionDetectionThreshold")
                        .HasColumnType("smallint");

                    b.Property<long>("NewIdentifier")
                        .HasColumnType("bigint");

                    b.Property<short>("OverSpeedDetectionDelay")
                        .HasColumnType("smallint");

                    b.Property<short>("OverSpeedDetectionThreshold")
                        .HasColumnType("smallint");

                    b.Property<short>("OverSpeedPeriod")
                        .HasColumnType("smallint");

                    b.Property<string>("ServerSimNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("SmscenterNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SMSCenterNumber")
                        .UseCollation("French_CI_AS");

                    b.Property<short>("Smsperiod")
                        .HasColumnType("smallint")
                        .HasColumnName("SMSPeriod");

                    b.Property<string>("Sosnumber1")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SOSNumber1")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("Sosnumber2")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SOSNumber2")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("Sosnumber3")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SOSNumber3")
                        .UseCollation("French_CI_AS");

                    b.Property<short>("StopDetectionDelay")
                        .HasColumnType("smallint");

                    b.Property<short>("StopDetectionThreshold")
                        .HasColumnType("smallint");

                    b.Property<bool>("SupportData")
                        .HasColumnType("bit");

                    b.Property<bool>("SupportGpssynchroAlert")
                        .HasColumnType("bit")
                        .HasColumnName("SupportGPSSynchroAlert");

                    b.Property<bool>("SupportHiddenAntennaAlert")
                        .HasColumnType("bit");

                    b.Property<bool>("SupportMotionAlert")
                        .HasColumnType("bit");

                    b.Property<bool>("SupportOverSpeedAlert")
                        .HasColumnType("bit");

                    b.Property<bool>("SupportSms")
                        .HasColumnType("bit")
                        .HasColumnName("SupportSMS");

                    b.Property<bool>("SupportSos")
                        .HasColumnType("bit")
                        .HasColumnName("SupportSOS");

                    b.Property<bool>("SupportStopAlert")
                        .HasColumnType("bit");

                    b.Property<short>("TrackingPeriod")
                        .HasColumnType("smallint");

                    b.Property<string>("Url")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("URL")
                        .UseCollation("French_CI_AS");

                    b.HasKey("SerialNumber");

                    b.ToTable("GLEquipment", (string)null);
                });

            modelBuilder.Entity("Domain.models.Governorate", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .UseCollation("French_CI_AS");

                    b.Property<double?>("TheButtom")
                        .HasColumnType("float");

                    b.Property<double?>("TheLeft")
                        .HasColumnType("float");

                    b.Property<double?>("TheRight")
                        .HasColumnType("float");

                    b.Property<double?>("TheTop")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Governorate", (string)null);
                });

            modelBuilder.Entity("Domain.models.GparcEquipment", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<double?>("BaseMileageKm")
                        .HasColumnType("float");

                    b.HasKey("SerialNumber");

                    b.ToTable("GParcEquipment", (string)null);
                });

            modelBuilder.Entity("Domain.models.Gpequipment", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("CallNumber1")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("CallNumber2")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("CallNumber3")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<short>("CourceChange")
                        .HasColumnType("smallint");

                    b.Property<double?>("CrashValue")
                        .HasColumnType("float");

                    b.Property<double?>("EmptyVoltage")
                        .HasColumnType("float");

                    b.Property<double>("FixedMovingDistance")
                        .HasColumnType("float");

                    b.Property<double?>("FullVoltage")
                        .HasColumnType("float");

                    b.Property<long?>("HardwareConfigForPm")
                        .HasColumnType("bigint")
                        .HasColumnName("HardwareConfigForPM");

                    b.Property<short>("KeepAlivePeriod")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)900);

                    b.Property<short>("LowestBatteryLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)-1);

                    b.Property<byte?>("LowestFuelLevel")
                        .HasColumnType("tinyint");

                    b.Property<double>("MinTrackingSpeed")
                        .HasColumnType("float");

                    b.Property<short>("MovingTrackingPeriod")
                        .HasColumnType("smallint");

                    b.Property<bool?>("OverSpeedBuzzerActive")
                        .HasColumnType("bit");

                    b.Property<short>("OverSpeedDetectionThreshold")
                        .HasColumnType("smallint");

                    b.Property<int?>("OverSpeedEnterDelay")
                        .HasColumnType("int");

                    b.Property<short>("Port")
                        .HasColumnType("smallint");

                    b.Property<string>("ServerIp")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasDefaultValue("")
                        .HasColumnName("ServerIP")
                        .UseCollation("French_CI_AS");

                    b.Property<short>("StopTrackingPeriod")
                        .HasColumnType("smallint");

                    b.Property<int?>("StoppedReportDelay")
                        .HasColumnType("int");

                    b.Property<bool>("SupportAccstatus")
                        .HasColumnType("bit")
                        .HasColumnName("SupportACCStatus");

                    b.Property<bool>("SupportAfter30mnSystemShutDown")
                        .HasColumnType("bit");

                    b.Property<bool>("SupportAlarm")
                        .HasColumnType("bit");

                    b.Property<bool>("SupportAntiCarJacking")
                        .HasColumnType("bit");

                    b.Property<bool>("SupportAntiOpenTemperSwitch")
                        .HasColumnType("bit");

                    b.Property<bool>("SupportArming")
                        .HasColumnType("bit");

                    b.Property<bool>("SupportCourceChange")
                        .HasColumnType("bit");

                    b.Property<bool?>("SupportCrashSensor")
                        .HasColumnType("bit");

                    b.Property<bool>("SupportDoorStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("SupportExternalBatteryRemoved")
                        .HasColumnType("bit");

                    b.Property<bool?>("SupportFuelLevel")
                        .HasColumnType("bit");

                    b.Property<bool>("SupportGeofence")
                        .HasColumnType("bit");

                    b.Property<bool>("SupportHelp")
                        .HasColumnType("bit");

                    b.Property<bool>("SupportHoodStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("SupportKeepAlive")
                        .HasColumnType("bit");

                    b.Property<bool>("SupportLowBatteryLevel")
                        .HasColumnType("bit");

                    b.Property<bool>("SupportOverSpeedDetectionThreshold")
                        .HasColumnType("bit");

                    b.Property<bool>("SupportPanicMode")
                        .HasColumnType("bit");

                    b.Property<bool?>("SupportShockSensor")
                        .HasColumnType("bit");

                    b.Property<bool>("SupportSos")
                        .HasColumnType("bit")
                        .HasColumnName("SupportSOS");

                    b.Property<bool>("SupportTemperatureCheck")
                        .HasColumnType("bit");

                    b.Property<bool?>("SupportTowedReport")
                        .HasColumnType("bit");

                    b.Property<bool>("SupportTrunkStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("SupportValetMode")
                        .HasColumnType("bit");

                    b.Property<short>("TemperatureMax")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)-1);

                    b.Property<short>("TemperatureMin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)-1);

                    b.Property<int>("TrackingModeTrackingModeId")
                        .HasColumnType("int")
                        .HasColumnName("TrackingMode_TrackingModeId");

                    b.HasKey("SerialNumber");

                    b.ToTable("GPEquipment", (string)null);
                });

            modelBuilder.Entity("Domain.models.GpsdataByDrvCd", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<double?>("Acceleration")
                        .HasColumnType("float");

                    b.Property<int?>("AccelerationPosition")
                        .HasColumnType("int");

                    b.Property<DateTime>("AcquisitionTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("AxleIndex")
                        .HasColumnType("int");

                    b.Property<int?>("AxleWeight")
                        .HasColumnType("int");

                    b.Property<int?>("Customer")
                        .HasColumnType("int");

                    b.Property<short>("Direction")
                        .HasColumnType("smallint");

                    b.Property<string>("DriverCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<double?>("EngineHours")
                        .HasColumnType("float");

                    b.Property<int?>("EngineTemperature")
                        .HasColumnType("int");

                    b.Property<string>("Equipment")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<short?>("FuelLevel")
                        .HasColumnType("smallint");

                    b.Property<short?>("Gpslevel")
                        .HasColumnType("smallint")
                        .HasColumnName("GPSLevel");

                    b.Property<short?>("Gsmlevel")
                        .HasColumnType("smallint")
                        .HasColumnName("GSMLevel");

                    b.Property<bool?>("IgnOn")
                        .HasColumnType("bit");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Message")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double?>("Mileage")
                        .HasColumnType("float");

                    b.Property<bool?>("OnMove")
                        .HasColumnType("bit");

                    b.Property<string>("OriginalEquipment")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<long?>("OtherInfo")
                        .HasColumnType("bigint");

                    b.Property<int>("RecordType")
                        .HasColumnType("int");

                    b.Property<int?>("Rpm")
                        .HasColumnType("int")
                        .HasColumnName("RPM");

                    b.Property<short>("Speed")
                        .HasColumnType("smallint");

                    b.Property<long>("Status")
                        .HasColumnType("bigint");

                    b.Property<string>("TachographData")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<double?>("Temperature")
                        .HasColumnType("float");

                    b.Property<double?>("TotalFuel")
                        .HasColumnType("float");

                    b.Property<long?>("TripLot")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("GPSDataByDrvCd", (string)null);
                });

            modelBuilder.Entity("Domain.models.Gpsdatum", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<double?>("Acceleration")
                        .HasColumnType("float");

                    b.Property<int?>("AccelerationPosition")
                        .HasColumnType("int");

                    b.Property<DateTime>("AcquisitionTime")
                        .HasColumnType("datetime");

                    b.Property<bool?>("ActivePressureSwitchX")
                        .HasColumnType("bit");

                    b.Property<bool?>("ActivePressureSwitchY")
                        .HasColumnType("bit");

                    b.Property<int?>("AdcVoltage")
                        .HasColumnType("int")
                        .HasColumnName("ADC_Voltage");

                    b.Property<bool?>("AlarmeVoie1")
                        .HasColumnType("bit");

                    b.Property<bool?>("AlarmeVoie2")
                        .HasColumnType("bit");

                    b.Property<bool?>("AlarmeVoie3")
                        .HasColumnType("bit");

                    b.Property<bool?>("AlarmeVoie4")
                        .HasColumnType("bit");

                    b.Property<bool?>("AlarmeVoie5")
                        .HasColumnType("bit");

                    b.Property<bool?>("AlarmeVoie6")
                        .HasColumnType("bit");

                    b.Property<bool?>("AlarmeVoie7")
                        .HasColumnType("bit");

                    b.Property<bool?>("AllPompAreWorking")
                        .HasColumnType("bit");

                    b.Property<int?>("AnalogInput1")
                        .HasColumnType("int");

                    b.Property<int?>("AnalogInput2")
                        .HasColumnType("int");

                    b.Property<int?>("AnalogInput3")
                        .HasColumnType("int");

                    b.Property<int?>("AnalogInput4")
                        .HasColumnType("int");

                    b.Property<bool?>("AuxiliaryFaultA")
                        .HasColumnType("bit");

                    b.Property<bool?>("AuxiliaryFaultB")
                        .HasColumnType("bit");

                    b.Property<bool?>("AuxiliaryFaultC")
                        .HasColumnType("bit");

                    b.Property<bool?>("AuxiliaryFaultD")
                        .HasColumnType("bit");

                    b.Property<bool?>("AuxiliaryFaultE")
                        .HasColumnType("bit");

                    b.Property<bool?>("AuxiliaryFaultF")
                        .HasColumnType("bit");

                    b.Property<int?>("AxleIndex")
                        .HasColumnType("int");

                    b.Property<int?>("AxleWeight")
                        .HasColumnType("int");

                    b.Property<bool?>("BottleHpa")
                        .HasColumnType("bit")
                        .HasColumnName("BottleHPA");

                    b.Property<bool?>("BottlePassage")
                        .HasColumnType("bit");

                    b.Property<double?>("BoxTemp")
                        .HasColumnType("float")
                        .HasColumnName("boxTemp");

                    b.Property<bool?>("C1aoffAlarm")
                        .HasColumnType("bit")
                        .HasColumnName("C1AOffAlarm");

                    b.Property<bool?>("C2aoffAlarm")
                        .HasColumnType("bit")
                        .HasColumnName("C2AOffAlarm");

                    b.Property<bool?>("C4aoffHpa")
                        .HasColumnType("bit")
                        .HasColumnName("C4AOffHPA");

                    b.Property<bool?>("C5aoffHpb")
                        .HasColumnType("bit")
                        .HasColumnName("C5AOffHPB");

                    b.Property<bool?>("C6aoffCo2")
                        .HasColumnType("bit")
                        .HasColumnName("C6AOffCO2");

                    b.Property<bool?>("C7aoffCo")
                        .HasColumnType("bit")
                        .HasColumnName("C7AOffCO");

                    b.Property<bool?>("C8aoff")
                        .HasColumnType("bit")
                        .HasColumnName("C8AOff");

                    b.Property<bool?>("C9aoffO2")
                        .HasColumnType("bit")
                        .HasColumnName("C9AOffO2");

                    b.Property<bool?>("COexterneAlarm")
                        .HasColumnType("bit")
                        .HasColumnName("cOExterneAlarm");

                    b.Property<bool?>("CappingAlarm")
                        .HasColumnType("bit");

                    b.Property<bool?>("CloggingFilter")
                        .HasColumnType("bit");

                    b.Property<bool?>("Co2ExterneBalarm")
                        .HasColumnType("bit")
                        .HasColumnName("co2ExterneBAlarm");

                    b.Property<bool?>("Co2alarm")
                        .HasColumnType("bit")
                        .HasColumnName("CO2Alarm");

                    b.Property<bool?>("Co2sansorAlarm")
                        .HasColumnType("bit")
                        .HasColumnName("CO2SansorAlarm");

                    b.Property<bool?>("Coalarm")
                        .HasColumnType("bit")
                        .HasColumnName("COAlarm");

                    b.Property<double?>("Colmatage")
                        .HasColumnType("float");

                    b.Property<bool?>("CommunicationCentraleMesureFault")
                        .HasColumnType("bit");

                    b.Property<bool?>("CommunicationExtensionFault")
                        .HasColumnType("bit");

                    b.Property<bool?>("CompressorOna")
                        .HasColumnType("bit")
                        .HasColumnName("CompressorONA");

                    b.Property<bool?>("CompressorOnb")
                        .HasColumnType("bit")
                        .HasColumnName("CompressorONB");

                    b.Property<bool?>("CompressorOnc")
                        .HasColumnType("bit")
                        .HasColumnName("CompressorONC");

                    b.Property<bool?>("CompressorOnd")
                        .HasColumnType("bit")
                        .HasColumnName("CompressorOND");

                    b.Property<bool?>("CompressorOne")
                        .HasColumnType("bit")
                        .HasColumnName("CompressorONE");

                    b.Property<bool?>("CompressorOnf")
                        .HasColumnType("bit")
                        .HasColumnName("CompressorONF");

                    b.Property<bool?>("CompressorProblemAlarmA")
                        .HasColumnType("bit");

                    b.Property<bool?>("CompressorProblemAlarmB")
                        .HasColumnType("bit");

                    b.Property<bool?>("CompressorProblemAlarmC")
                        .HasColumnType("bit");

                    b.Property<bool?>("CompressorProblemAlarmD")
                        .HasColumnType("bit");

                    b.Property<bool?>("CosansorAlarm")
                        .HasColumnType("bit")
                        .HasColumnName("COSansorAlarm");

                    b.Property<int?>("Customer")
                        .HasColumnType("int");

                    b.Property<bool?>("CutedEnergy")
                        .HasColumnType("bit")
                        .HasColumnName("cutedEnergy");

                    b.Property<bool?>("CutedExtensionCard")
                        .HasColumnType("bit")
                        .HasColumnName("cutedExtensionCard");

                    b.Property<bool?>("CycliqueAlertPressionReg")
                        .HasColumnType("bit");

                    b.Property<bool?>("CycliqueGeneralAlert")
                        .HasColumnType("bit");

                    b.Property<bool?>("CycliquePlafMoteurA")
                        .HasColumnType("bit");

                    b.Property<bool?>("CycliquePlafMoteurB")
                        .HasColumnType("bit");

                    b.Property<bool?>("CycliquePlafMoteurC")
                        .HasColumnType("bit");

                    b.Property<bool?>("CycliquePlafToutMoteurs")
                        .HasColumnType("bit");

                    b.Property<bool?>("CycliquePressionBasse")
                        .HasColumnType("bit");

                    b.Property<bool?>("CycliquePressionHaute")
                        .HasColumnType("bit");

                    b.Property<bool?>("CycliqueProbMoteurA")
                        .HasColumnType("bit");

                    b.Property<bool?>("CycliqueProbMoteurB")
                        .HasColumnType("bit");

                    b.Property<bool?>("CycliqueProbMoteurC")
                        .HasColumnType("bit");

                    b.Property<bool?>("CycliqueTempBasse")
                        .HasColumnType("bit");

                    b.Property<bool?>("CycliqueTemphaute")
                        .HasColumnType("bit");

                    b.Property<double?>("Debit")
                        .HasColumnType("float");

                    b.Property<bool?>("DefaultPurgerX")
                        .HasColumnType("bit");

                    b.Property<bool?>("DefaultPurgerY")
                        .HasColumnType("bit");

                    b.Property<bool?>("DefaultTempX")
                        .HasColumnType("bit");

                    b.Property<bool?>("DefaultTempY")
                        .HasColumnType("bit");

                    b.Property<bool?>("DefautAlimentation")
                        .HasColumnType("bit")
                        .HasColumnName("defautAlimentation");

                    b.Property<bool?>("DefautBoutonInhibition")
                        .HasColumnType("bit")
                        .HasColumnName("defautBoutonInhibition");

                    b.Property<bool?>("DefautBoutonTest")
                        .HasColumnType("bit")
                        .HasColumnName("defautBoutonTest");

                    b.Property<bool?>("DefautBuzzer")
                        .HasColumnType("bit")
                        .HasColumnName("defautBuzzer");

                    b.Property<bool?>("DefautCapaciteBuzzer")
                        .HasColumnType("bit")
                        .HasColumnName("defautCapaciteBuzzer");

                    b.Property<bool?>("DefautClavierOutil")
                        .HasColumnType("bit")
                        .HasColumnName("defautClavierOutil");

                    b.Property<bool?>("DefautCommunicationBoitierBoucle")
                        .HasColumnType("bit")
                        .HasColumnName("defautCommunicationBoitierBoucle");

                    b.Property<bool?>("DefautCommunicationBoitierTimeout")
                        .HasColumnType("bit")
                        .HasColumnName("defautCommunicationBoitierTimeout");

                    b.Property<bool?>("DefautConvertisseurAnalog")
                        .HasColumnType("bit")
                        .HasColumnName("defautConvertisseurAnalog");

                    b.Property<bool?>("DefautHorloge")
                        .HasColumnType("bit")
                        .HasColumnName("defautHorloge");

                    b.Property<bool?>("Depassementseuilbasvoie1")
                        .HasColumnType("bit")
                        .HasColumnName("depassementseuilbasvoie1");

                    b.Property<bool?>("Depassementseuilbasvoie2")
                        .HasColumnType("bit")
                        .HasColumnName("depassementseuilbasvoie2");

                    b.Property<bool?>("Depassementseuilbasvoie3")
                        .HasColumnType("bit")
                        .HasColumnName("depassementseuilbasvoie3");

                    b.Property<bool?>("Depassementseuilbasvoie4")
                        .HasColumnType("bit")
                        .HasColumnName("depassementseuilbasvoie4");

                    b.Property<bool?>("Depassementseuilbasvoie5")
                        .HasColumnType("bit")
                        .HasColumnName("depassementseuilbasvoie5");

                    b.Property<bool?>("Depassementseuilbasvoie6")
                        .HasColumnType("bit")
                        .HasColumnName("depassementseuilbasvoie6");

                    b.Property<bool?>("Depassementseuilbasvoie7")
                        .HasColumnType("bit")
                        .HasColumnName("depassementseuilbasvoie7");

                    b.Property<bool?>("Depassementseuilhautvoie1")
                        .HasColumnType("bit")
                        .HasColumnName("depassementseuilhautvoie1");

                    b.Property<bool?>("Depassementseuilhautvoie2")
                        .HasColumnType("bit")
                        .HasColumnName("depassementseuilhautvoie2");

                    b.Property<bool?>("Depassementseuilhautvoie3")
                        .HasColumnType("bit")
                        .HasColumnName("depassementseuilhautvoie3");

                    b.Property<bool?>("Depassementseuilhautvoie4")
                        .HasColumnType("bit")
                        .HasColumnName("depassementseuilhautvoie4");

                    b.Property<bool?>("Depassementseuilhautvoie5")
                        .HasColumnType("bit")
                        .HasColumnName("depassementseuilhautvoie5");

                    b.Property<bool?>("Depassementseuilhautvoie6")
                        .HasColumnType("bit")
                        .HasColumnName("depassementseuilhautvoie6");

                    b.Property<bool?>("Depassementseuilhautvoie7")
                        .HasColumnType("bit")
                        .HasColumnName("depassementseuilhautvoie7");

                    b.Property<short>("Direction")
                        .HasColumnType("smallint");

                    b.Property<bool?>("DisjonctionFaultA")
                        .HasColumnType("bit");

                    b.Property<bool?>("DisjonctionFaultB")
                        .HasColumnType("bit");

                    b.Property<bool?>("DisjonctionFaultC")
                        .HasColumnType("bit");

                    b.Property<bool?>("DisjonctionFaultD")
                        .HasColumnType("bit");

                    b.Property<bool?>("DisjonctionFaultE")
                        .HasColumnType("bit");

                    b.Property<bool?>("DisjonctionFaultF")
                        .HasColumnType("bit");

                    b.Property<string>("DriverCode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool?>("DryerTemperatureProblemA")
                        .HasColumnType("bit");

                    b.Property<bool?>("DryerTemperatureProblemB")
                        .HasColumnType("bit");

                    b.Property<bool?>("DryerTemperatureProblemC")
                        .HasColumnType("bit");

                    b.Property<bool?>("DryerTemperatureProblemD")
                        .HasColumnType("bit");

                    b.Property<double?>("EngineHours")
                        .HasColumnType("float");

                    b.Property<int?>("EngineTemperature")
                        .HasColumnType("int");

                    b.Property<string>("Equipment")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<bool?>("EvflexoPompA")
                        .HasColumnType("bit")
                        .HasColumnName("EVFlexoPompA");

                    b.Property<bool?>("EvflexoPompB")
                        .HasColumnType("bit")
                        .HasColumnName("EVFlexoPompB");

                    b.Property<bool?>("EvflexoPompC")
                        .HasColumnType("bit")
                        .HasColumnName("EVFlexoPompC");

                    b.Property<bool?>("EvflexoPompD")
                        .HasColumnType("bit")
                        .HasColumnName("EVFlexoPompD");

                    b.Property<bool?>("EvflexoPompE")
                        .HasColumnType("bit")
                        .HasColumnName("EVFlexoPompE");

                    b.Property<bool?>("EvflexoPompF")
                        .HasColumnType("bit")
                        .HasColumnName("EVFlexoPompF");

                    b.Property<bool?>("Fan")
                        .HasColumnType("bit");

                    b.Property<bool?>("FaultSynthesis")
                        .HasColumnType("bit");

                    b.Property<short?>("FuelLevel")
                        .HasColumnType("smallint");

                    b.Property<short?>("Gpslevel")
                        .HasColumnType("smallint")
                        .HasColumnName("GPSLevel");

                    b.Property<short?>("Gsmlevel")
                        .HasColumnType("smallint")
                        .HasColumnName("GSMLevel");

                    b.Property<bool?>("HighDeltaBoxTemp")
                        .HasColumnType("bit");

                    b.Property<bool?>("HighNetworkC2v")
                        .HasColumnType("bit")
                        .HasColumnName("highNetworkC2V");

                    b.Property<bool?>("HighTempFaultA")
                        .HasColumnType("bit")
                        .HasColumnName("highTempFaultA");

                    b.Property<bool?>("HighTempFaultB")
                        .HasColumnType("bit")
                        .HasColumnName("highTempFaultB");

                    b.Property<bool?>("HighTempFaultC")
                        .HasColumnType("bit")
                        .HasColumnName("highTempFaultC");

                    b.Property<bool?>("HighTempFaultD")
                        .HasColumnType("bit")
                        .HasColumnName("highTempFaultD");

                    b.Property<bool?>("HighTempFaultE")
                        .HasColumnType("bit")
                        .HasColumnName("highTempFaultE");

                    b.Property<bool?>("HighTempFaultF")
                        .HasColumnType("bit")
                        .HasColumnName("highTempFaultF");

                    b.Property<bool?>("HighTemperatureAlarm")
                        .HasColumnType("bit")
                        .HasColumnName("highTemperatureAlarm");

                    b.Property<bool?>("HighVoltage")
                        .HasColumnType("bit")
                        .HasColumnName("highVoltage");

                    b.Property<bool?>("HightLocalTemp")
                        .HasColumnType("bit")
                        .HasColumnName("hightLocalTemp");

                    b.Property<bool?>("HightNetWorkPression")
                        .HasColumnType("bit");

                    b.Property<bool?>("HightNetworkBar5")
                        .HasColumnType("bit")
                        .HasColumnName("hightNetworkBar5");

                    b.Property<bool?>("HightNetworkBar9")
                        .HasColumnType("bit")
                        .HasColumnName("hightNetworkBar9");

                    b.Property<bool?>("HightNetworkPressureBar5")
                        .HasColumnType("bit")
                        .HasColumnName("hightNetworkPressureBar5");

                    b.Property<bool?>("HightNetworkPressureBar9")
                        .HasColumnType("bit")
                        .HasColumnName("hightNetworkPressureBar9");

                    b.Property<bool?>("HightO2airAmbiant")
                        .HasColumnType("bit")
                        .HasColumnName("hightO2AirAmbiant");

                    b.Property<bool?>("HightO2airMedical")
                        .HasColumnType("bit")
                        .HasColumnName("hightO2AirMedical");

                    b.Property<double?>("HourCounterDryerX")
                        .HasColumnType("float");

                    b.Property<double?>("HourCounterDryerY")
                        .HasColumnType("float");

                    b.Property<double?>("HourCounterPompA")
                        .HasColumnType("float");

                    b.Property<double?>("HourCounterPompB")
                        .HasColumnType("float");

                    b.Property<double?>("HourCounterPompC")
                        .HasColumnType("float");

                    b.Property<double?>("HourCounterPompD")
                        .HasColumnType("float");

                    b.Property<double?>("HourCounterPompE")
                        .HasColumnType("float");

                    b.Property<double?>("HourCounterPompF")
                        .HasColumnType("float");

                    b.Property<bool?>("Hpaalarm")
                        .HasColumnType("bit")
                        .HasColumnName("HPAAlarm");

                    b.Property<bool?>("Hpbalarm")
                        .HasColumnType("bit")
                        .HasColumnName("HPBAlarm");

                    b.Property<bool?>("HsboxTempSansor")
                        .HasColumnType("bit")
                        .HasColumnName("HSBoxTempSansor");

                    b.Property<double?>("Humidity")
                        .HasColumnType("float");

                    b.Property<bool?>("HumidityA")
                        .HasColumnType("bit");

                    b.Property<bool?>("HumidityB")
                        .HasColumnType("bit");

                    b.Property<double?>("Hygrometry")
                        .HasColumnType("float")
                        .HasColumnName("hygrometry");

                    b.Property<bool?>("HygrometryAlarm")
                        .HasColumnType("bit");

                    b.Property<bool?>("HygrometryLineA")
                        .HasColumnType("bit")
                        .HasColumnName("hygrometryLineA");

                    b.Property<bool?>("HygrometryLineB")
                        .HasColumnType("bit")
                        .HasColumnName("hygrometryLineB");

                    b.Property<bool?>("HygrometryLineC")
                        .HasColumnType("bit")
                        .HasColumnName("hygrometryLineC");

                    b.Property<bool?>("HygrometryLineD")
                        .HasColumnType("bit")
                        .HasColumnName("hygrometryLineD");

                    b.Property<bool?>("IgnOn")
                        .HasColumnType("bit");

                    b.Property<bool?>("Input1")
                        .HasColumnType("bit");

                    b.Property<bool?>("Input2")
                        .HasColumnType("bit");

                    b.Property<bool?>("Input3")
                        .HasColumnType("bit");

                    b.Property<bool?>("InputAuboosterHp")
                        .HasColumnType("bit")
                        .HasColumnName("inputAUBoosterHp");

                    b.Property<bool?>("InputBekoFaultA")
                        .HasColumnType("bit")
                        .HasColumnName("inputBekoFaultA");

                    b.Property<bool?>("InputBekoFaultB")
                        .HasColumnType("bit")
                        .HasColumnName("inputBekoFaultB");

                    b.Property<bool?>("InputBekoFaultC")
                        .HasColumnType("bit")
                        .HasColumnName("inputBekoFaultC");

                    b.Property<bool?>("InputBekoFaultD")
                        .HasColumnType("bit")
                        .HasColumnName("inputBekoFaultD");

                    b.Property<bool?>("InputDefaultTempDryerA")
                        .HasColumnType("bit")
                        .HasColumnName("inputDefaultTempDryerA");

                    b.Property<bool?>("InputDefaultTempDryerB")
                        .HasColumnType("bit")
                        .HasColumnName("inputDefaultTempDryerB");

                    b.Property<bool?>("InputDefaultTempDryerC")
                        .HasColumnType("bit")
                        .HasColumnName("inputDefaultTempDryerC");

                    b.Property<bool?>("InputDefaultTempDryerD")
                        .HasColumnType("bit")
                        .HasColumnName("inputDefaultTempDryerD");

                    b.Property<bool?>("InputExternalCo2fault")
                        .HasColumnType("bit")
                        .HasColumnName("inputExternalCO2Fault");

                    b.Property<bool?>("InputExternalCofault")
                        .HasColumnType("bit")
                        .HasColumnName("inputExternalCOFault");

                    b.Property<bool?>("InputMaboosterHp")
                        .HasColumnType("bit")
                        .HasColumnName("inputMABoosterHp");

                    b.Property<bool?>("InputPca")
                        .HasColumnType("bit")
                        .HasColumnName("InputPCA");

                    b.Property<bool?>("InputPressureSwitchX")
                        .HasColumnType("bit");

                    b.Property<bool?>("InputPressureSwitchY")
                        .HasColumnType("bit");

                    b.Property<bool?>("InputRotationDirection")
                        .HasColumnType("bit");

                    b.Property<double?>("Intensity")
                        .HasColumnType("float");

                    b.Property<bool?>("IntensityAlarm")
                        .HasColumnType("bit");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Level1")
                        .HasColumnType("float");

                    b.Property<double?>("Level2")
                        .HasColumnType("float");

                    b.Property<double?>("Level3")
                        .HasColumnType("float");

                    b.Property<double?>("Level4")
                        .HasColumnType("float");

                    b.Property<double?>("Level5")
                        .HasColumnType("float");

                    b.Property<double?>("Level6")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<bool?>("LowLocalTemp")
                        .HasColumnType("bit")
                        .HasColumnName("lowLocalTemp");

                    b.Property<bool?>("LowNetWorkPression")
                        .HasColumnType("bit");

                    b.Property<bool?>("LowNetworkBar5")
                        .HasColumnType("bit")
                        .HasColumnName("lowNetworkBar5");

                    b.Property<bool?>("LowNetworkBar9")
                        .HasColumnType("bit")
                        .HasColumnName("lowNetworkBar9");

                    b.Property<bool?>("LowNetworkC2v")
                        .HasColumnType("bit")
                        .HasColumnName("lowNetworkC2V");

                    b.Property<bool?>("LowNetworkPressureBar5")
                        .HasColumnType("bit")
                        .HasColumnName("lowNetworkPressureBar5");

                    b.Property<bool?>("LowNetworkPressureBar9")
                        .HasColumnType("bit")
                        .HasColumnName("lowNetworkPressureBar9");

                    b.Property<bool?>("LowO2airAmbiant")
                        .HasColumnType("bit")
                        .HasColumnName("lowO2AirAmbiant");

                    b.Property<bool?>("LowO2airMedical")
                        .HasColumnType("bit")
                        .HasColumnName("lowO2AirMedical");

                    b.Property<bool?>("LowTempFaultA")
                        .HasColumnType("bit")
                        .HasColumnName("lowTempFaultA");

                    b.Property<bool?>("LowTempFaultB")
                        .HasColumnType("bit")
                        .HasColumnName("lowTempFaultB");

                    b.Property<bool?>("LowTempFaultC")
                        .HasColumnType("bit")
                        .HasColumnName("lowTempFaultC");

                    b.Property<bool?>("LowTempFaultD")
                        .HasColumnType("bit")
                        .HasColumnName("lowTempFaultD");

                    b.Property<bool?>("LowTempFaultE")
                        .HasColumnType("bit")
                        .HasColumnName("lowTempFaultE");

                    b.Property<bool?>("LowTempFaultF")
                        .HasColumnType("bit")
                        .HasColumnName("lowTempFaultF");

                    b.Property<bool?>("LowTemperatureAlarm")
                        .HasColumnType("bit")
                        .HasColumnName("lowTemperatureAlarm");

                    b.Property<bool?>("LowVoltage")
                        .HasColumnType("bit")
                        .HasColumnName("lowVoltage");

                    b.Property<bool?>("MemorizedAlert")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double?>("Mileage")
                        .HasColumnType("float");

                    b.Property<bool?>("NOalarm")
                        .HasColumnType("bit")
                        .HasColumnName("nOAlarm");

                    b.Property<double?>("Network5Bar")
                        .HasColumnType("float")
                        .HasColumnName("network5Bar");

                    b.Property<bool?>("NetworkSpeedAlarm")
                        .HasColumnType("bit");

                    b.Property<bool?>("No2alarm")
                        .HasColumnType("bit")
                        .HasColumnName("NO2Alarm");

                    b.Property<bool?>("No2offAlarm")
                        .HasColumnType("bit")
                        .HasColumnName("NO2OffAlarm");

                    b.Property<bool?>("NooffAlarm")
                        .HasColumnType("bit")
                        .HasColumnName("NOOffAlarm");

                    b.Property<bool?>("OffScaleC1v")
                        .HasColumnType("bit");

                    b.Property<bool?>("OffScaleC2v")
                        .HasColumnType("bit");

                    b.Property<bool?>("OffScaleC3a")
                        .HasColumnType("bit")
                        .HasColumnName("OffScaleC3A");

                    b.Property<bool?>("OffScaleTempAmbient")
                        .HasColumnType("bit");

                    b.Property<bool?>("OffScaleTempPompA")
                        .HasColumnType("bit");

                    b.Property<bool?>("OffScaleTempPompB")
                        .HasColumnType("bit");

                    b.Property<bool?>("OffScaleTempPompC")
                        .HasColumnType("bit");

                    b.Property<bool?>("OffScaleTempPompD")
                        .HasColumnType("bit");

                    b.Property<bool?>("OffScaleTempPompE")
                        .HasColumnType("bit");

                    b.Property<bool?>("OffScaleTempPompF")
                        .HasColumnType("bit");

                    b.Property<bool?>("OilLvlFaultA")
                        .HasColumnType("bit");

                    b.Property<bool?>("OilLvlFaultB")
                        .HasColumnType("bit");

                    b.Property<bool?>("OilLvlFaultC")
                        .HasColumnType("bit");

                    b.Property<bool?>("OilLvlFaultD")
                        .HasColumnType("bit");

                    b.Property<bool?>("OilLvlFaultE")
                        .HasColumnType("bit");

                    b.Property<bool?>("OilLvlFaultF")
                        .HasColumnType("bit");

                    b.Property<bool?>("OilLvlFaultOrAuxa")
                        .HasColumnType("bit")
                        .HasColumnName("OilLvlFaultOrAUXA");

                    b.Property<bool?>("OilLvlFaultOrAuxb")
                        .HasColumnType("bit")
                        .HasColumnName("OilLvlFaultOrAUXB");

                    b.Property<bool?>("OilLvlFaultOrAuxc")
                        .HasColumnType("bit")
                        .HasColumnName("OilLvlFaultOrAUXC");

                    b.Property<bool?>("OnDryerX")
                        .HasColumnType("bit");

                    b.Property<bool?>("OnDryerY")
                        .HasColumnType("bit");

                    b.Property<bool?>("OnMove")
                        .HasColumnType("bit");

                    b.Property<string>("OriginalEquipment")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("OtherInfo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<bool?>("OverCurrentAlarm")
                        .HasColumnType("bit");

                    b.Property<bool?>("OverVoltageAlarm")
                        .HasColumnType("bit");

                    b.Property<bool?>("PlafonnementAlarm")
                        .HasColumnType("bit")
                        .HasColumnName("plafonnementAlarm");

                    b.Property<bool?>("PompAon")
                        .HasColumnType("bit")
                        .HasColumnName("PompAON");

                    b.Property<bool?>("PompBon")
                        .HasColumnType("bit")
                        .HasColumnName("PompBON");

                    b.Property<bool?>("PompCon")
                        .HasColumnType("bit")
                        .HasColumnName("PompCON");

                    b.Property<bool?>("PompDon")
                        .HasColumnType("bit")
                        .HasColumnName("PompDON");

                    b.Property<bool?>("PompEon")
                        .HasColumnType("bit")
                        .HasColumnName("PompEON");

                    b.Property<bool?>("PompFon")
                        .HasColumnType("bit")
                        .HasColumnName("PompFON");

                    b.Property<bool?>("PompReturnedOnA")
                        .HasColumnType("bit");

                    b.Property<bool?>("PompReturnedOnB")
                        .HasColumnType("bit");

                    b.Property<bool?>("PompReturnedOnC")
                        .HasColumnType("bit");

                    b.Property<bool?>("PompReturnedOnD")
                        .HasColumnType("bit");

                    b.Property<bool?>("PompReturnedOnE")
                        .HasColumnType("bit");

                    b.Property<bool?>("PompReturnedOnF")
                        .HasColumnType("bit");

                    b.Property<double?>("Power")
                        .HasColumnType("float");

                    b.Property<bool?>("PreAlarmTempPumpA")
                        .HasColumnType("bit");

                    b.Property<bool?>("PreAlarmTempPumpB")
                        .HasColumnType("bit");

                    b.Property<bool?>("PreAlarmTempPumpC")
                        .HasColumnType("bit");

                    b.Property<bool?>("PreAlarmTempPumpD")
                        .HasColumnType("bit");

                    b.Property<bool?>("PreAlarmTempPumpE")
                        .HasColumnType("bit");

                    b.Property<bool?>("PreAlarmTempPumpF")
                        .HasColumnType("bit");

                    b.Property<double?>("Pressure1")
                        .HasColumnType("float");

                    b.Property<double?>("Pressure2")
                        .HasColumnType("float");

                    b.Property<double?>("Pressure3")
                        .HasColumnType("float");

                    b.Property<double?>("Pressure4")
                        .HasColumnType("float");

                    b.Property<double?>("Pressure5")
                        .HasColumnType("float");

                    b.Property<double?>("Pressure6")
                        .HasColumnType("float");

                    b.Property<bool?>("PressureBouteilleA")
                        .HasColumnType("bit");

                    b.Property<double?>("PressureBouteilleAvalue")
                        .HasColumnType("float")
                        .HasColumnName("PressureBouteilleAValue");

                    b.Property<bool?>("PressureBouteilleB")
                        .HasColumnType("bit");

                    b.Property<double?>("PressureBouteilleBvalue")
                        .HasColumnType("float")
                        .HasColumnName("PressureBouteilleBValue");

                    b.Property<double?>("PressureC1a")
                        .HasColumnType("float")
                        .HasColumnName("pressureC1A");

                    b.Property<double?>("PressureC1v")
                        .HasColumnType("float")
                        .HasColumnName("pressureC1V");

                    b.Property<double?>("PressureC2a")
                        .HasColumnType("float")
                        .HasColumnName("pressureC2A");

                    b.Property<double?>("PressureC2v")
                        .HasColumnType("float")
                        .HasColumnName("pressureC2V");

                    b.Property<double?>("PressureC3a")
                        .HasColumnType("float")
                        .HasColumnName("PressureC3A");

                    b.Property<double?>("PressureC4a")
                        .HasColumnType("float")
                        .HasColumnName("pressureC4A");

                    b.Property<double?>("PressureC5a")
                        .HasColumnType("float")
                        .HasColumnName("pressureC5A");

                    b.Property<double?>("PressureReg")
                        .HasColumnType("float");

                    b.Property<int>("RecordType")
                        .HasColumnType("int");

                    b.Property<bool?>("RegulationAlarm")
                        .HasColumnType("bit");

                    b.Property<bool?>("ReturnCompressorOna")
                        .HasColumnType("bit")
                        .HasColumnName("returnCompressorONA");

                    b.Property<bool?>("ReturnCompressorOnb")
                        .HasColumnType("bit")
                        .HasColumnName("returnCompressorONB");

                    b.Property<bool?>("ReturnCompressorOnc")
                        .HasColumnType("bit")
                        .HasColumnName("returnCompressorONC");

                    b.Property<bool?>("ReturnCompressorOnd")
                        .HasColumnType("bit")
                        .HasColumnName("returnCompressorOND");

                    b.Property<bool?>("ReturnCompressorOne")
                        .HasColumnType("bit")
                        .HasColumnName("ReturnCompressorONE");

                    b.Property<bool?>("ReturnCompressorOnf")
                        .HasColumnType("bit")
                        .HasColumnName("ReturnCompressorONF");

                    b.Property<bool?>("RotationDefaultCompressorXy")
                        .HasColumnType("bit")
                        .HasColumnName("RotationDefaultCompressorXY");

                    b.Property<int?>("Rpm")
                        .HasColumnType("int")
                        .HasColumnName("RPM");

                    b.Property<bool?>("S1aoffHygromtry")
                        .HasColumnType("bit")
                        .HasColumnName("S1AOffHygromtry");

                    b.Property<double?>("SansorCo")
                        .HasColumnType("float")
                        .HasColumnName("sansorCO");

                    b.Property<double?>("SansorCo2")
                        .HasColumnType("float")
                        .HasColumnName("sansorCO2");

                    b.Property<double?>("SensorCo2ambiant")
                        .HasColumnType("float")
                        .HasColumnName("SensorCO2Ambiant");

                    b.Property<double?>("SensorCo2medical")
                        .HasColumnType("float")
                        .HasColumnName("SensorCO2Medical");

                    b.Property<double?>("SensorNo")
                        .HasColumnType("float")
                        .HasColumnName("SensorNO");

                    b.Property<double?>("SensorNo2")
                        .HasColumnType("float")
                        .HasColumnName("SensorNO2");

                    b.Property<double?>("SensorO2")
                        .HasColumnType("float");

                    b.Property<double?>("SensorSo2")
                        .HasColumnType("float")
                        .HasColumnName("SensorSO2");

                    b.Property<bool?>("Shutter")
                        .HasColumnType("bit");

                    b.Property<bool?>("So2alarm")
                        .HasColumnType("bit")
                        .HasColumnName("SO2Alarm");

                    b.Property<bool?>("So2offAlarm")
                        .HasColumnType("bit")
                        .HasColumnName("SO2OffAlarm");

                    b.Property<short>("Speed")
                        .HasColumnType("smallint");

                    b.Property<bool?>("SpeedVariatorDefault")
                        .HasColumnType("bit");

                    b.Property<long>("Status")
                        .HasColumnType("bigint");

                    b.Property<bool?>("SynthesisAlarm")
                        .HasColumnType("bit");

                    b.Property<string>("TachographData")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("TempLocal")
                        .HasColumnType("float");

                    b.Property<double?>("TempPompA")
                        .HasColumnType("float");

                    b.Property<double?>("TempPompB")
                        .HasColumnType("float");

                    b.Property<double?>("TempPompC")
                        .HasColumnType("float");

                    b.Property<double?>("TempPompD")
                        .HasColumnType("float");

                    b.Property<double?>("TempPompE")
                        .HasColumnType("float");

                    b.Property<double?>("TempPompF")
                        .HasColumnType("float");

                    b.Property<double?>("Temperature")
                        .HasColumnType("float");

                    b.Property<short>("Temperature0")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)-32768);

                    b.Property<double?>("Tension")
                        .HasColumnType("float");

                    b.Property<double?>("TotalFuel")
                        .HasColumnType("float");

                    b.Property<bool?>("TrapBekoProblemA")
                        .HasColumnType("bit")
                        .HasColumnName("trapBekoProblemA");

                    b.Property<bool?>("TrapBekoProblemB")
                        .HasColumnType("bit")
                        .HasColumnName("trapBekoProblemB");

                    b.Property<bool?>("TrapBekoProblemC")
                        .HasColumnType("bit")
                        .HasColumnName("trapBekoProblemC");

                    b.Property<bool?>("TrapBekoProblemD")
                        .HasColumnType("bit")
                        .HasColumnName("trapBekoProblemD");

                    b.Property<long?>("TripLot")
                        .HasColumnType("bigint");

                    b.Property<bool?>("UnderPressure")
                        .HasColumnType("bit");

                    b.Property<bool?>("UnderVoltageAlarm")
                        .HasColumnType("bit");

                    b.Property<bool?>("VacuostatAlarm")
                        .HasColumnType("bit");

                    b.Property<bool?>("VacuostatPsXalarm")
                        .HasColumnType("bit")
                        .HasColumnName("VacuostatPsXAlarm");

                    b.Property<bool?>("VacuostatPsYalarm")
                        .HasColumnType("bit")
                        .HasColumnName("VacuostatPsYAlarm");

                    b.Property<string>("VehiculeWeight")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("VeryHighTempAlarm")
                        .HasColumnType("bit");

                    b.Property<double?>("Voie1")
                        .HasColumnType("float")
                        .HasColumnName("voie1");

                    b.Property<double?>("Voie2")
                        .HasColumnType("float")
                        .HasColumnName("voie2");

                    b.Property<double?>("Voie3")
                        .HasColumnType("float")
                        .HasColumnName("voie3");

                    b.Property<double?>("Voie4")
                        .HasColumnType("float")
                        .HasColumnName("voie4");

                    b.Property<double?>("Voie5")
                        .HasColumnType("float")
                        .HasColumnName("voie5");

                    b.Property<double?>("Voie6")
                        .HasColumnType("float")
                        .HasColumnName("voie6");

                    b.Property<double?>("Voie7")
                        .HasColumnType("float")
                        .HasColumnName("voie7");

                    b.Property<double?>("X")
                        .HasColumnType("float");

                    b.Property<double?>("Y")
                        .HasColumnType("float");

                    b.HasKey("Id")
                        .HasName("PK_GPSData1TempNew8");

                    b.ToTable("GPSData", (string)null);
                });

            modelBuilder.Entity("Domain.models.Gqequipment", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("AuthorizedNumberForSilentCall")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<short?>("BaudeRateIndex")
                        .HasColumnType("smallint");

                    b.Property<string>("FirmwareVersion")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<long?>("HardwareConfigForQl")
                        .HasColumnType("bigint")
                        .HasColumnName("HardwareConfigForQL");

                    b.Property<short?>("KeepAlivePeriodMn")
                        .HasColumnType("smallint");

                    b.Property<short?>("MaxFuelVoltageLevelMv")
                        .HasColumnType("smallint")
                        .HasColumnName("MaxFuelVoltageLevelMV");

                    b.Property<short?>("MinFuelVoltageLevelMv")
                        .HasColumnType("smallint")
                        .HasColumnName("MinFuelVoltageLevelMV");

                    b.Property<short?>("OverSpeedDetectionThreshold")
                        .HasColumnType("smallint");

                    b.Property<short?>("OverSpeedEnterDelayS")
                        .HasColumnType("smallint");

                    b.Property<short?>("OverSpeedPeriodicitySendingS")
                        .HasColumnType("smallint");

                    b.Property<short?>("PrimaryPort")
                        .HasColumnType("smallint");

                    b.Property<string>("PrimaryServerIp")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<short?>("StationaryPeriodWhenAccOnM")
                        .HasColumnType("smallint");

                    b.Property<short?>("TrackingAngle")
                        .HasColumnType("smallint");

                    b.Property<short?>("TrackingDistanceM")
                        .HasColumnType("smallint");

                    b.HasKey("SerialNumber");

                    b.ToTable("GQEquipment", (string)null);
                });

            modelBuilder.Entity("Domain.models.Grequipment", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<bool>("AdcAboveOrBelow")
                        .HasColumnType("bit")
                        .HasColumnName("ADC_AboveOrBelow");

                    b.Property<short>("AdcInputDelay")
                        .HasColumnType("smallint")
                        .HasColumnName("ADC_InputDelay");

                    b.Property<double>("AdcInputTriggerLevel")
                        .HasColumnType("float")
                        .HasColumnName("ADC_InputTriggerLevel");

                    b.Property<short?>("OverSpeedDetectionThreshold")
                        .HasColumnType("smallint");

                    b.Property<short?>("TrackingPeriod")
                        .HasColumnType("smallint");

                    b.HasKey("SerialNumber");

                    b.ToTable("GREquipment", (string)null);
                });

            modelBuilder.Entity("Domain.models.Gsequipment", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("MobileName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("Sim1number")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("SIM1Number")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("Sim2number")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("SIM2Number")
                        .UseCollation("French_CI_AS");

                    b.Property<int?>("TrackingPeriodInS")
                        .HasColumnType("int");

                    b.HasKey("SerialNumber");

                    b.ToTable("GSEquipment", (string)null);
                });

            modelBuilder.Entity("Domain.models.Gstdequipment", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("French_CI_AS");

                    b.HasKey("SerialNumber")
                        .HasName("PK_GTSDEquipment");

                    b.ToTable("GSTDEquipment", (string)null);
                });

            modelBuilder.Entity("Domain.models.Gtequipment", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<short?>("AccelerationThreshold")
                        .HasColumnType("smallint");

                    b.Property<bool?>("BuzzerFunction")
                        .HasColumnType("bit");

                    b.Property<string>("CallNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<short?>("EngineTemperatureThreshold")
                        .HasColumnType("smallint");

                    b.Property<short?>("FuelLevelPercent4FillingAlarm")
                        .HasColumnType("smallint");

                    b.Property<short?>("FuelLevelPourcentageForStolenAlarm")
                        .HasColumnType("smallint");

                    b.Property<short?>("MaxFuelVoltageLevel")
                        .HasColumnType("smallint");

                    b.Property<short?>("MinFuelVoltageLevel")
                        .HasColumnType("smallint");

                    b.Property<short?>("OverSpeedDetectionThreshold")
                        .HasColumnType("smallint");

                    b.Property<short?>("Port")
                        .HasColumnType("smallint");

                    b.Property<short?>("Rpmthreshold")
                        .HasColumnType("smallint")
                        .HasColumnName("RPMThreshold");

                    b.Property<short?>("SendPeriod")
                        .HasColumnType("smallint");

                    b.Property<double?>("TheoreticalFuelConsumption")
                        .HasColumnType("float");

                    b.Property<short?>("TrackingAngle")
                        .HasColumnType("smallint");

                    b.Property<short?>("TrackingDistance")
                        .HasColumnType("smallint");

                    b.Property<short?>("TrackingPeriod")
                        .HasColumnType("smallint");

                    b.HasKey("SerialNumber");

                    b.ToTable("GTEquipment", (string)null);
                });

            modelBuilder.Entity("Domain.models.Gtftequipment", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<double?>("BaseMileageKm")
                        .HasColumnType("float");

                    b.HasKey("SerialNumber");

                    b.ToTable("GTFTEquipment", (string)null);
                });

            modelBuilder.Entity("Domain.models.Gxequipment", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<double?>("FixedMovingDistance")
                        .HasColumnType("float");

                    b.Property<bool?>("Initialized")
                        .HasColumnType("bit");

                    b.Property<bool?>("MileageActivated")
                        .HasColumnType("bit");

                    b.Property<short?>("MovingTrackingPeriod")
                        .HasColumnType("smallint");

                    b.Property<short?>("OverSpeedDetectionThreshold")
                        .HasColumnType("smallint");

                    b.Property<short?>("Port")
                        .HasColumnType("smallint");

                    b.Property<string>("ServerIp")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ServerIP")
                        .UseCollation("French_CI_AS");

                    b.Property<short?>("StopTrackingPeriod")
                        .HasColumnType("smallint");

                    b.Property<bool?>("SupportOverSpeed")
                        .HasColumnType("bit");

                    b.HasKey("SerialNumber");

                    b.ToTable("GXEquipment", (string)null);
                });

            modelBuilder.Entity("Domain.models.Hc", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .UseCollation("French_CI_AS");

                    b.Property<bool?>("AlertEnable")
                        .HasColumnType("bit");

                    b.Property<bool?>("AlertSent")
                        .HasColumnType("bit");

                    b.Property<int?>("Customer")
                        .HasColumnType("int");

                    b.Property<string>("Dblogin")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DBLogin")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("Dbname")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DBName")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("Dbpassword")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DBPassword")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("Dbserver")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DBServer")
                        .UseCollation("French_CI_AS");

                    b.Property<DateTime?>("FirstExecutionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Hcsaddress")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("HCSAddress")
                        .UseCollation("French_CI_AS");

                    b.Property<int?>("Hcsport")
                        .HasColumnType("int")
                        .HasColumnName("HCSPort");

                    b.Property<DateTime?>("HcstoHslastExecutionDate")
                        .HasColumnType("datetime")
                        .HasColumnName("HCSToHSLastExecutionDate");

                    b.Property<DateTime?>("LastExecutionDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("LicensePeriod")
                        .HasColumnType("int");

                    b.Property<string>("MachineName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("TnvAddress")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<int?>("TnvPort")
                        .HasColumnType("int");

                    b.Property<string>("Version")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.HasKey("Id");

                    b.ToTable("HCS", (string)null);
                });

            modelBuilder.Entity("Domain.models.Intervention", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Anomaly")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateIntervetion")
                        .HasColumnType("datetime");

                    b.Property<string>("FixedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("Panne")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("PanneDescr")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .UseCollation("French_CI_AS");

                    b.HasKey("Id");

                    b.ToTable("Intervention", (string)null);
                });

            modelBuilder.Entity("Domain.models.Ioelement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AcquisitionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("Equipment")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<int?>("IoelementProp")
                        .HasColumnType("int")
                        .HasColumnName("IOElementProp");

                    b.Property<int?>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("IOElement", (string)null);
                });

            modelBuilder.Entity("Domain.models.Line", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<int?>("Way")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Line", (string)null);
                });

            modelBuilder.Entity("Domain.models.Localite", b =>
                {
                    b.Property<int?>("Id")
                        .HasColumnType("int");

                    b.Property<double?>("LatLoc")
                        .HasColumnType("float")
                        .HasColumnName("latLoc");

                    b.Property<double?>("LonLoc")
                        .HasColumnType("float")
                        .HasColumnName("lonLoc");

                    b.Property<string>("NomLoc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.ToTable("Localite", (string)null);
                });

            modelBuilder.Entity("Domain.models.Mail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Customer")
                        .HasColumnType("int");

                    b.Property<int?>("ExternalId")
                        .HasColumnType("int");

                    b.Property<int?>("ExternalId2")
                        .HasColumnType("int");

                    b.Property<string>("MailAdress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("French_CI_AS");

                    b.HasKey("Id");

                    b.ToTable("Mail");
                });

            modelBuilder.Entity("Domain.models.MailConfig", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Mail")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MailConfig", (string)null);
                });

            modelBuilder.Entity("Domain.models.Maintenance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("BeginStartRecurringDateGmt")
                        .HasColumnType("datetime")
                        .HasColumnName("BeginStartRecurringDateGMT");

                    b.Property<int>("Car")
                        .HasColumnType("int");

                    b.Property<short?>("Changed")
                        .HasColumnType("smallint");

                    b.Property<int?>("Customer")
                        .HasColumnType("int");

                    b.Property<bool?>("EnableGenerateAlertByExternApp")
                        .HasColumnType("bit");

                    b.Property<bool?>("EnableGenerateAlertByWt")
                        .HasColumnType("bit")
                        .HasColumnName("EnableGenerateAlertByWT");

                    b.Property<DateTime?>("ExpiryDateGmtforExernApp")
                        .HasColumnType("datetime")
                        .HasColumnName("ExpiryDateGMTForExernApp");

                    b.Property<DateTime?>("ExpiryDateGmtforWt")
                        .HasColumnType("datetime")
                        .HasColumnName("ExpiryDateGMTForWT");

                    b.Property<short?>("IsReminderBy")
                        .HasColumnType("smallint");

                    b.Property<bool?>("IsReminderByOdometer")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastConfirmedAlertByWtgmt")
                        .HasColumnType("datetime")
                        .HasColumnName("LastConfirmedAlertByWTGMT");

                    b.Property<DateTime?>("LastDueDateGmt")
                        .HasColumnType("datetime")
                        .HasColumnName("LastDueDateGMT");

                    b.Property<DateTime?>("LastGenerateAlertByExternAppGmt")
                        .HasColumnType("datetime")
                        .HasColumnName("LastGenerateAlertByExternAppGMT");

                    b.Property<DateTime?>("MaintenanceDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("MaintenanceFrequence")
                        .HasColumnType("int");

                    b.Property<int>("MaintenanceType")
                        .HasColumnType("int");

                    b.Property<int?>("MileageIndex")
                        .HasColumnType("int");

                    b.Property<double?>("NextWarnedDueMileageForExternApp")
                        .HasColumnType("float");

                    b.Property<double?>("NextWarnedDueMileageForWt")
                        .HasColumnType("float")
                        .HasColumnName("NextWarnedDueMileageForWT");

                    b.Property<int?>("RecurringDateConfig")
                        .HasColumnType("int");

                    b.Property<double?>("WarnMeBeforeNdayKm")
                        .HasColumnType("float")
                        .HasColumnName("WarnMeBeforeNDayKm");

                    b.HasKey("Id");

                    b.ToTable("Maintenance", (string)null);
                });

            modelBuilder.Entity("Domain.models.Map", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<int>("ExternalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Map", (string)null);
                });

            modelBuilder.Entity("Domain.models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Equipment")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("MessageText")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("ReceivedOrSent")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength()
                        .UseCollation("French_CI_AS");

                    b.Property<DateTime?>("SentTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("Speed")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.HasKey("Id");

                    b.HasIndex("Equipment");

                    b.ToTable("Message", (string)null);
                });

            modelBuilder.Entity("Domain.models.MigrationHistory", b =>
                {
                    b.Property<string>("MigrationId")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ContextKey")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<byte[]>("Model")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ProductVersion")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("MigrationId", "ContextKey")
                        .HasName("PK_dbo.__MigrationHistory");

                    b.ToTable("__MigrationHistory", (string)null);
                });

            modelBuilder.Entity("Domain.models.Mission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AcquisitionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DriverCode")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("Equipment")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<byte?>("MissionDef")
                        .HasColumnType("tinyint");

                    b.HasKey("Id")
                        .HasName("PK_Mission1");

                    b.HasIndex(new[] { "DriverCode", "AcquisitionTime" }, "IX_MissionDriverCodeAcquisi")
                        .IsUnique()
                        .HasFilter("[DriverCode] IS NOT NULL AND [AcquisitionTime] IS NOT NULL");

                    b.HasIndex(new[] { "Equipment", "AcquisitionTime" }, "IX_MissionEquipAcquisi")
                        .IsUnique()
                        .HasFilter("[Equipment] IS NOT NULL AND [AcquisitionTime] IS NOT NULL");

                    b.ToTable("Mission", (string)null);
                });

            modelBuilder.Entity("Domain.models.MissionDef", b =>
                {
                    b.Property<int>("Customer")
                        .HasColumnType("int");

                    b.Property<byte>("MissionCode")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("French_CI_AS");

                    b.HasKey("Customer", "MissionCode")
                        .HasName("PK_MissionDef_1");

                    b.ToTable("MissionDef", (string)null);
                });

            modelBuilder.Entity("Domain.models.MissionOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("AlertGeneratedByExternApp")
                        .HasColumnType("bit");

                    b.Property<int?>("Car")
                        .HasColumnType("int");

                    b.Property<int?>("Customer")
                        .HasColumnType("int");

                    b.Property<int?>("Driver")
                        .HasColumnType("int");

                    b.Property<bool?>("EnableGenerateAlertByExternApp")
                        .HasColumnType("bit");

                    b.Property<bool?>("EnableGenerateAlertByWt")
                        .HasColumnType("bit")
                        .HasColumnName("EnableGenerateAlertByWT");

                    b.Property<bool?>("EnableGenerateAlertPayementExpiredByExternApp")
                        .HasColumnType("bit");

                    b.Property<bool?>("EnableGenerateAlertPayementExpiredByWt")
                        .HasColumnType("bit")
                        .HasColumnName("EnableGenerateAlertPayementExpiredByWT");

                    b.Property<DateTime?>("EndMissionDateGmt")
                        .HasColumnType("datetime")
                        .HasColumnName("EndMissionDateGMT");

                    b.Property<double?>("EstimatedTotalFuelConsumed")
                        .HasColumnType("float");

                    b.Property<string>("MissionDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("NumberStr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<double?>("OdometerIn")
                        .HasColumnType("float");

                    b.Property<double?>("OdometerOut")
                        .HasColumnType("float");

                    b.Property<DateTime?>("PlaceEndDateGmt")
                        .HasColumnType("datetime")
                        .HasColumnName("PlaceEndDateGMT");

                    b.Property<DateTime?>("PlaceStartDateGmt")
                        .HasColumnType("datetime")
                        .HasColumnName("PlaceStartDateGMT");

                    b.Property<double?>("RealTotalFuelConsumed")
                        .HasColumnType("float");

                    b.Property<string>("Reference")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<int?>("StandardPlaceEnd")
                        .HasColumnType("int");

                    b.Property<int?>("StandardPlaceStart")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartMissionDateGmt")
                        .HasColumnType("datetime")
                        .HasColumnName("StartMissionDateGMT");

                    b.Property<short?>("Status")
                        .HasColumnType("smallint");

                    b.Property<double?>("WeightLoaded")
                        .HasColumnType("float");

                    b.Property<double?>("WeightPriceCharged")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("MissionOrder", (string)null);
                });

            modelBuilder.Entity("Domain.models.MonthlyStatsticDatum", b =>
                {
                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.Property<string>("Equipment")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<int?>("TotalReceivedBytesFromServer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int?>("TotalSendBytes")
                        .HasColumnType("int");

                    b.HasKey("Month", "Year", "Equipment")
                        .HasName("PK_MonthlyStatisticData");

                    b.HasIndex(new[] { "Equipment", "Month", "Year" }, "IX_MonthlyStatsticData");

                    b.ToTable("MonthlyStatsticData");
                });

            modelBuilder.Entity("Domain.models.NvalidGpsdatum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("Acceleration")
                        .HasColumnType("float");

                    b.Property<int?>("AccelerationPosition")
                        .HasColumnType("int");

                    b.Property<DateTime>("AcquisitionTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("AdcVoltage")
                        .HasColumnType("int")
                        .HasColumnName("ADC_Voltage");

                    b.Property<int?>("AnalogInput1")
                        .HasColumnType("int");

                    b.Property<int?>("AnalogInput2")
                        .HasColumnType("int");

                    b.Property<int?>("AnalogInput3")
                        .HasColumnType("int");

                    b.Property<int?>("AnalogInput4")
                        .HasColumnType("int");

                    b.Property<int?>("AxleIndex")
                        .HasColumnType("int");

                    b.Property<int?>("AxleWeight")
                        .HasColumnType("int");

                    b.Property<int?>("Customer")
                        .HasColumnType("int");

                    b.Property<short>("Direction")
                        .HasColumnType("smallint");

                    b.Property<int>("Distance")
                        .HasColumnType("int");

                    b.Property<double?>("EngineHours")
                        .HasColumnType("float");

                    b.Property<int?>("EngineTemperature")
                        .HasColumnType("int");

                    b.Property<string>("Equipment")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<short?>("FuelLevel")
                        .HasColumnType("smallint");

                    b.Property<short?>("Gpslevel")
                        .HasColumnType("smallint")
                        .HasColumnName("GPSLevel");

                    b.Property<short?>("Gsmlevel")
                        .HasColumnType("smallint")
                        .HasColumnName("GSMLevel");

                    b.Property<bool?>("IgnOn")
                        .HasColumnType("bit");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Message")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<double?>("Mileage")
                        .HasColumnType("float");

                    b.Property<bool?>("OnMove")
                        .HasColumnType("bit");

                    b.Property<string>("OriginalEquipment")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<long?>("OtherInfo")
                        .HasColumnType("bigint");

                    b.Property<int>("RecordType")
                        .HasColumnType("int");

                    b.Property<int?>("Rpm")
                        .HasColumnType("int")
                        .HasColumnName("RPM");

                    b.Property<short>("Speed")
                        .HasColumnType("smallint");

                    b.Property<long>("Status")
                        .HasColumnType("bigint");

                    b.Property<string>("TachographData")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .UseCollation("French_CI_AS");

                    b.Property<double?>("Temperature")
                        .HasColumnType("float");

                    b.Property<short>("TemperatureI")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("('-32768')");

                    b.Property<double?>("TotalFuel")
                        .HasColumnType("float");

                    b.Property<string>("VehiculeWeight")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<double?>("X")
                        .HasColumnType("float");

                    b.Property<double?>("Y")
                        .HasColumnType("float");

                    b.HasKey("Id")
                        .HasName("PK_GPSData1");

                    b.ToTable("NValidGPSData", (string)null);
                });

            modelBuilder.Entity("Domain.models.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Accepted")
                        .HasColumnType("bit");

                    b.Property<int?>("Approbation")
                        .HasColumnType("int");

                    b.Property<string>("ApprobationReference")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<double?>("Cost")
                        .HasColumnType("float");

                    b.Property<string>("Details")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("Object")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("Reference")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<DateTime?>("SaveDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Supplier")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Offer", (string)null);
                });

            modelBuilder.Entity("Domain.models.OutOfCountryDateW", b =>
                {
                    b.Property<string>("Equipment")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<DateTime?>("DateOfLastOutOfCountry")
                        .HasColumnType("datetime");

                    b.HasKey("Equipment")
                        .HasName("PK2_OutOfCountryDate");

                    b.ToTable("OutOfCountryDateW", (string)null);
                });

            modelBuilder.Entity("Domain.models.PersonneGp", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("FixTelphoneNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("MobileTelephoneNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.HasKey("Id")
                        .HasName("PK_Personne_gps");

                    b.ToTable("PersonneGps");
                });

            modelBuilder.Entity("Domain.models.Place", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Account")
                        .HasColumnType("int");

                    b.Property<int>("ExternalId")
                        .HasColumnType("int");

                    b.Property<int?>("ExternalId2")
                        .HasColumnType("int");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.Property<short?>("TypeAccess")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("Account");

                    b.ToTable("Place", (string)null);
                });

            modelBuilder.Entity("Domain.models.Place3", b =>
                {
                    b.Property<string>("Account")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("PlaceName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("SymbolPath")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<double?>("X")
                        .HasColumnType("float");

                    b.Property<double?>("Y")
                        .HasColumnType("float");

                    b.ToTable("Place3", (string)null);
                });

            modelBuilder.Entity("Domain.models.PlannedMission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Account")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BeginMissionEstimatedDateGmt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("BeginMissionRealDateGmt")
                        .HasColumnType("datetime");

                    b.Property<double?>("Cost")
                        .HasColumnType("float");

                    b.Property<int?>("Customer")
                        .HasColumnType("int");

                    b.Property<int?>("DestinationPlaceOfMission")
                        .HasColumnType("int");

                    b.Property<int?>("Driver")
                        .HasColumnType("int");

                    b.Property<double?>("EstimatedTotalFuelConsumed")
                        .HasColumnType("float");

                    b.Property<DateTime?>("MaxEndMissionDateGmt")
                        .HasColumnType("datetime");

                    b.Property<short?>("MissionType")
                        .HasColumnType("smallint");

                    b.Property<string>("NumberStr")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<double?>("OdometerIn")
                        .HasColumnType("float");

                    b.Property<double?>("OdometerOut")
                        .HasColumnType("float");

                    b.Property<double?>("PriceOfWeightLoaded")
                        .HasColumnType("float");

                    b.Property<string>("Purpose")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .UseCollation("French_CI_AS");

                    b.Property<int?>("RealMissionPeriodInS")
                        .HasColumnType("int");

                    b.Property<double?>("RealTotalFuelConsumed")
                        .HasColumnType("float");

                    b.Property<bool?>("ShowNotification")
                        .HasColumnType("bit");

                    b.Property<int?>("StartPlaceOfMission")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartingEstimatedDateGmt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("StartingRealDateGmt")
                        .HasColumnType("datetime");

                    b.Property<short?>("Status")
                        .HasColumnType("smallint");

                    b.Property<int?>("TrackingTarget")
                        .HasColumnType("int");

                    b.Property<double?>("WeightLoaded")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("PlannedMission", (string)null);
                });

            modelBuilder.Entity("Domain.models.PlannedStation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ArrivalDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DepartureDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<int?>("Line")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("Place")
                        .HasColumnType("int");

                    b.Property<string>("RecurrenceInfo")
                        .HasColumnType("ntext")
                        .UseCollation("French_CI_AS");

                    b.HasKey("Id");

                    b.ToTable("PlannedStation", (string)null);
                });

            modelBuilder.Entity("Domain.models.Point", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ExternalId")
                        .HasColumnType("int");

                    b.Property<int?>("ExternalId2")
                        .HasColumnType("int");

                    b.Property<int>("GeometricShape")
                        .HasColumnType("int");

                    b.Property<short>("GeometricShapeOrder")
                        .HasColumnType("smallint");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<double?>("X")
                        .HasColumnType("float");

                    b.Property<double?>("Y")
                        .HasColumnType("float");

                    b.HasKey("Id")
                        .HasName("PK_WayPoint");

                    b.HasIndex("GeometricShape");

                    b.ToTable("Point", (string)null);
                });

            modelBuilder.Entity("Domain.models.Polygon", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<short?>("AreaWidth")
                        .HasColumnType("smallint");

                    b.Property<int?>("ArgbAreaColor")
                        .HasColumnType("int");

                    b.Property<int?>("Delegation")
                        .HasColumnType("int");

                    b.Property<int?>("Governorate")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.HasKey("Id");

                    b.ToTable("Polygon", (string)null);
                });

            modelBuilder.Entity("Domain.models.PreviousPassword", b =>
                {
                    b.Property<string>("PasswordHash")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("UserId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("PasswordHash", "UserId")
                        .HasName("PK_dbo.PreviousPasswords");

                    b.HasIndex(new[] { "UserId" }, "IX_UserId");

                    b.ToTable("PreviousPasswords");
                });

            modelBuilder.Entity("Domain.models.ProblemResolved", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateSave")
                        .HasColumnType("datetime");

                    b.Property<string>("Equipment")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<int>("TestedProblem")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("French_CI_AS");

                    b.HasKey("Id");

                    b.ToTable("ProblemResolved", (string)null);
                });

            modelBuilder.Entity("Domain.models.QueryState", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("French_CI_AS");

                    b.HasKey("Id");

                    b.ToTable("QueryState", (string)null);
                });

            modelBuilder.Entity("Domain.models.QueryStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.HasKey("Id");

                    b.ToTable("QueryStatus", (string)null);
                });

            modelBuilder.Entity("Domain.models.QueryType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.HasKey("Id");

                    b.ToTable("QueryType", (string)null);
                });

            modelBuilder.Entity("Domain.models.RecordType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.HasKey("Id");

                    b.ToTable("RecordType", (string)null);
                });

            modelBuilder.Entity("Domain.models.Refresh", b =>
                {
                    b.Property<string>("Equipment")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<int?>("AccelerationPosition")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("AcquisitionTime")
                        .HasColumnType("datetime");

                    b.Property<bool?>("ActivePressureSwitchX")
                        .HasColumnType("bit");

                    b.Property<bool?>("ActivePressureSwitchY")
                        .HasColumnType("bit");

                    b.Property<int?>("AdcVoltage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("ADC_Voltage");

                    b.Property<bool?>("AlarmeVoie1")
                        .HasColumnType("bit");

                    b.Property<bool?>("AlarmeVoie2")
                        .HasColumnType("bit");

                    b.Property<bool?>("AlarmeVoie3")
                        .HasColumnType("bit");

                    b.Property<bool?>("AlarmeVoie4")
                        .HasColumnType("bit");

                    b.Property<bool?>("AlarmeVoie5")
                        .HasColumnType("bit");

                    b.Property<bool?>("AlarmeVoie6")
                        .HasColumnType("bit");

                    b.Property<bool?>("AlarmeVoie7")
                        .HasColumnType("bit");

                    b.Property<bool?>("AllPompAreWorking")
                        .HasColumnType("bit");

                    b.Property<bool?>("AuxiliaryFaultA")
                        .HasColumnType("bit");

                    b.Property<bool?>("AuxiliaryFaultB")
                        .HasColumnType("bit");

                    b.Property<bool?>("AuxiliaryFaultC")
                        .HasColumnType("bit");

                    b.Property<bool?>("AuxiliaryFaultD")
                        .HasColumnType("bit");

                    b.Property<bool?>("AuxiliaryFaultE")
                        .HasColumnType("bit");

                    b.Property<bool?>("AuxiliaryFaultF")
                        .HasColumnType("bit");

                    b.Property<int?>("AxleIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int?>("AxleWeight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool?>("BatteryFaultAlarm")
                        .HasColumnType("bit");

                    b.Property<bool?>("BottleHpa")
                        .HasColumnType("bit")
                        .HasColumnName("BottleHPA");

                    b.Property<bool?>("BottlePassage")
                        .HasColumnType("bit");

                    b.Property<double?>("BoxTemp")
                        .HasColumnType("float")
                        .HasColumnName("boxTemp");

                    b.Property<bool?>("C1aoffAlarm")
                        .HasColumnType("bit")
                        .HasColumnName("C1AOffAlarm");

                    b.Property<bool?>("C2aoffAlarm")
                        .HasColumnType("bit")
                        .HasColumnName("C2AOffAlarm");

                    b.Property<bool?>("C4aoffHpa")
                        .HasColumnType("bit")
                        .HasColumnName("C4AOffHPA");

                    b.Property<bool?>("C5aoffHpb")
                        .HasColumnType("bit")
                        .HasColumnName("C5AOffHPB");

                    b.Property<bool?>("C6aoffCo2")
                        .HasColumnType("bit")
                        .HasColumnName("C6AOffCO2");

                    b.Property<bool?>("C7aoffCo")
                        .HasColumnType("bit")
                        .HasColumnName("C7AOffCO");

                    b.Property<bool?>("C8aoff")
                        .HasColumnType("bit")
                        .HasColumnName("C8AOff");

                    b.Property<bool?>("C9aoffO2")
                        .HasColumnType("bit")
                        .HasColumnName("C9AOffO2");

                    b.Property<bool?>("COexterneAlarm")
                        .HasColumnType("bit")
                        .HasColumnName("cOExterneAlarm");

                    b.Property<bool?>("CappingAlarm")
                        .HasColumnType("bit");

                    b.Property<bool?>("CloggingFilter")
                        .HasColumnType("bit");

                    b.Property<bool?>("Co2ExterneBalarm")
                        .HasColumnType("bit")
                        .HasColumnName("co2ExterneBAlarm");

                    b.Property<bool?>("Co2alarm")
                        .HasColumnType("bit")
                        .HasColumnName("CO2Alarm");

                    b.Property<bool?>("Co2sansorAlarm")
                        .HasColumnType("bit")
                        .HasColumnName("CO2SansorAlarm");

                    b.Property<bool?>("Coalarm")
                        .HasColumnType("bit")
                        .HasColumnName("COAlarm");

                    b.Property<double?>("Colmatage")
                        .HasColumnType("float");

                    b.Property<bool?>("CommunicationCentraleMesureFault")
                        .HasColumnType("bit");

                    b.Property<bool?>("CommunicationExtensionFault")
                        .HasColumnType("bit");

                    b.Property<bool?>("CompressorOna")
                        .HasColumnType("bit")
                        .HasColumnName("CompressorONA");

                    b.Property<bool?>("CompressorOnb")
                        .HasColumnType("bit")
                        .HasColumnName("CompressorONB");

                    b.Property<bool?>("CompressorOnc")
                        .HasColumnType("bit")
                        .HasColumnName("CompressorONC");

                    b.Property<bool?>("CompressorOnd")
                        .HasColumnType("bit")
                        .HasColumnName("CompressorOND");

                    b.Property<bool?>("CompressorOne")
                        .HasColumnType("bit")
                        .HasColumnName("CompressorONE");

                    b.Property<bool?>("CompressorOnf")
                        .HasColumnType("bit")
                        .HasColumnName("CompressorONF");

                    b.Property<bool?>("CompressorProblemAlarmA")
                        .HasColumnType("bit");

                    b.Property<bool?>("CompressorProblemAlarmB")
                        .HasColumnType("bit");

                    b.Property<bool?>("CompressorProblemAlarmC")
                        .HasColumnType("bit");

                    b.Property<bool?>("CompressorProblemAlarmD")
                        .HasColumnType("bit");

                    b.Property<bool?>("Connected")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("CosansorAlarm")
                        .HasColumnType("bit")
                        .HasColumnName("COSansorAlarm");

                    b.Property<int?>("Customer")
                        .HasColumnType("int");

                    b.Property<bool?>("CutedEnergy")
                        .HasColumnType("bit")
                        .HasColumnName("cutedEnergy");

                    b.Property<bool?>("CutedExtensionCard")
                        .HasColumnType("bit")
                        .HasColumnName("cutedExtensionCard");

                    b.Property<bool?>("CycliqueAlertPressionReg")
                        .HasColumnType("bit");

                    b.Property<bool?>("CycliqueGeneralAlert")
                        .HasColumnType("bit");

                    b.Property<bool?>("CycliquePlafMoteurA")
                        .HasColumnType("bit");

                    b.Property<bool?>("CycliquePlafMoteurB")
                        .HasColumnType("bit");

                    b.Property<bool?>("CycliquePlafMoteurC")
                        .HasColumnType("bit");

                    b.Property<bool?>("CycliquePlafToutMoteurs")
                        .HasColumnType("bit");

                    b.Property<bool?>("CycliquePressionBasse")
                        .HasColumnType("bit");

                    b.Property<bool?>("CycliquePressionHaute")
                        .HasColumnType("bit");

                    b.Property<bool?>("CycliqueProbMoteurA")
                        .HasColumnType("bit");

                    b.Property<bool?>("CycliqueProbMoteurB")
                        .HasColumnType("bit");

                    b.Property<bool?>("CycliqueProbMoteurC")
                        .HasColumnType("bit");

                    b.Property<bool?>("CycliqueTempBasse")
                        .HasColumnType("bit");

                    b.Property<bool?>("CycliqueTemphaute")
                        .HasColumnType("bit");

                    b.Property<bool?>("DefaultPurgerX")
                        .HasColumnType("bit");

                    b.Property<bool?>("DefaultPurgerY")
                        .HasColumnType("bit");

                    b.Property<bool?>("DefaultTempX")
                        .HasColumnType("bit");

                    b.Property<bool?>("DefaultTempY")
                        .HasColumnType("bit");

                    b.Property<bool?>("DefautAlimentation")
                        .HasColumnType("bit")
                        .HasColumnName("defautAlimentation");

                    b.Property<bool?>("DefautBoutonInhibition")
                        .HasColumnType("bit")
                        .HasColumnName("defautBoutonInhibition");

                    b.Property<bool?>("DefautBoutonTest")
                        .HasColumnType("bit")
                        .HasColumnName("defautBoutonTest");

                    b.Property<bool?>("DefautBuzzer")
                        .HasColumnType("bit")
                        .HasColumnName("defautBuzzer");

                    b.Property<bool?>("DefautCapaciteBuzzer")
                        .HasColumnType("bit")
                        .HasColumnName("defautCapaciteBuzzer");

                    b.Property<bool?>("DefautClavierOutil")
                        .HasColumnType("bit")
                        .HasColumnName("defautClavierOutil");

                    b.Property<bool?>("DefautCommunicationBoitierBoucle")
                        .HasColumnType("bit")
                        .HasColumnName("defautCommunicationBoitierBoucle");

                    b.Property<bool?>("DefautCommunicationBoitierTimeout")
                        .HasColumnType("bit")
                        .HasColumnName("defautCommunicationBoitierTimeout");

                    b.Property<bool?>("DefautConvertisseurAnalog")
                        .HasColumnType("bit")
                        .HasColumnName("defautConvertisseurAnalog");

                    b.Property<bool?>("DefautHorloge")
                        .HasColumnType("bit")
                        .HasColumnName("defautHorloge");

                    b.Property<bool?>("Depassementseuilbasvoie1")
                        .HasColumnType("bit")
                        .HasColumnName("depassementseuilbasvoie1");

                    b.Property<bool?>("Depassementseuilbasvoie2")
                        .HasColumnType("bit")
                        .HasColumnName("depassementseuilbasvoie2");

                    b.Property<bool?>("Depassementseuilbasvoie3")
                        .HasColumnType("bit")
                        .HasColumnName("depassementseuilbasvoie3");

                    b.Property<bool?>("Depassementseuilbasvoie4")
                        .HasColumnType("bit")
                        .HasColumnName("depassementseuilbasvoie4");

                    b.Property<bool?>("Depassementseuilbasvoie5")
                        .HasColumnType("bit")
                        .HasColumnName("depassementseuilbasvoie5");

                    b.Property<bool?>("Depassementseuilbasvoie6")
                        .HasColumnType("bit")
                        .HasColumnName("depassementseuilbasvoie6");

                    b.Property<bool?>("Depassementseuilbasvoie7")
                        .HasColumnType("bit")
                        .HasColumnName("depassementseuilbasvoie7");

                    b.Property<bool?>("Depassementseuilhautvoie1")
                        .HasColumnType("bit")
                        .HasColumnName("depassementseuilhautvoie1");

                    b.Property<bool?>("Depassementseuilhautvoie2")
                        .HasColumnType("bit")
                        .HasColumnName("depassementseuilhautvoie2");

                    b.Property<bool?>("Depassementseuilhautvoie3")
                        .HasColumnType("bit")
                        .HasColumnName("depassementseuilhautvoie3");

                    b.Property<bool?>("Depassementseuilhautvoie4")
                        .HasColumnType("bit")
                        .HasColumnName("depassementseuilhautvoie4");

                    b.Property<bool?>("Depassementseuilhautvoie5")
                        .HasColumnType("bit")
                        .HasColumnName("depassementseuilhautvoie5");

                    b.Property<bool?>("Depassementseuilhautvoie6")
                        .HasColumnType("bit")
                        .HasColumnName("depassementseuilhautvoie6");

                    b.Property<bool?>("Depassementseuilhautvoie7")
                        .HasColumnType("bit")
                        .HasColumnName("depassementseuilhautvoie7");

                    b.Property<short>("Direction")
                        .HasColumnType("smallint");

                    b.Property<bool?>("DisjonctionFaultA")
                        .HasColumnType("bit");

                    b.Property<bool?>("DisjonctionFaultB")
                        .HasColumnType("bit");

                    b.Property<bool?>("DisjonctionFaultC")
                        .HasColumnType("bit");

                    b.Property<bool?>("DisjonctionFaultD")
                        .HasColumnType("bit");

                    b.Property<bool?>("DisjonctionFaultE")
                        .HasColumnType("bit");

                    b.Property<bool?>("DisjonctionFaultF")
                        .HasColumnType("bit");

                    b.Property<string>("DriverCode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool?>("DryerTemperatureProblemA")
                        .HasColumnType("bit");

                    b.Property<bool?>("DryerTemperatureProblemB")
                        .HasColumnType("bit");

                    b.Property<bool?>("DryerTemperatureProblemC")
                        .HasColumnType("bit");

                    b.Property<bool?>("DryerTemperatureProblemD")
                        .HasColumnType("bit");

                    b.Property<double?>("EngineHours")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<int?>("EngineTemperature")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(-32768);

                    b.Property<bool?>("EvflexoPompA")
                        .HasColumnType("bit")
                        .HasColumnName("EVFlexoPompA");

                    b.Property<bool?>("EvflexoPompB")
                        .HasColumnType("bit")
                        .HasColumnName("EVFlexoPompB");

                    b.Property<bool?>("EvflexoPompC")
                        .HasColumnType("bit")
                        .HasColumnName("EVFlexoPompC");

                    b.Property<bool?>("EvflexoPompD")
                        .HasColumnType("bit")
                        .HasColumnName("EVFlexoPompD");

                    b.Property<bool?>("EvflexoPompE")
                        .HasColumnType("bit")
                        .HasColumnName("EVFlexoPompE");

                    b.Property<bool?>("EvflexoPompF")
                        .HasColumnType("bit")
                        .HasColumnName("EVFlexoPompF");

                    b.Property<bool?>("Fan")
                        .HasColumnType("bit");

                    b.Property<bool?>("FaultSynthesis")
                        .HasColumnType("bit");

                    b.Property<double?>("FuelConsumptionPerDay")
                        .HasColumnType("float");

                    b.Property<short?>("FuelLevel")
                        .HasColumnType("smallint");

                    b.Property<short?>("Gpslevel")
                        .HasColumnType("smallint")
                        .HasColumnName("GPSLevel");

                    b.Property<short?>("Gsmlevel")
                        .HasColumnType("smallint")
                        .HasColumnName("GSMLevel");

                    b.Property<bool?>("HighDeltaBoxTemp")
                        .HasColumnType("bit");

                    b.Property<bool?>("HighNetworkC2v")
                        .HasColumnType("bit")
                        .HasColumnName("highNetworkC2V");

                    b.Property<bool?>("HighTempFaultA")
                        .HasColumnType("bit")
                        .HasColumnName("highTempFaultA");

                    b.Property<bool?>("HighTempFaultB")
                        .HasColumnType("bit")
                        .HasColumnName("highTempFaultB");

                    b.Property<bool?>("HighTempFaultC")
                        .HasColumnType("bit")
                        .HasColumnName("highTempFaultC");

                    b.Property<bool?>("HighTempFaultD")
                        .HasColumnType("bit")
                        .HasColumnName("highTempFaultD");

                    b.Property<bool?>("HighTempFaultE")
                        .HasColumnType("bit")
                        .HasColumnName("highTempFaultE");

                    b.Property<bool?>("HighTempFaultF")
                        .HasColumnType("bit")
                        .HasColumnName("highTempFaultF");

                    b.Property<bool?>("HighTemperatureAlarm")
                        .HasColumnType("bit")
                        .HasColumnName("highTemperatureAlarm");

                    b.Property<bool?>("HighVoltage")
                        .HasColumnType("bit")
                        .HasColumnName("highVoltage");

                    b.Property<bool?>("HightLocalTemp")
                        .HasColumnType("bit")
                        .HasColumnName("hightLocalTemp");

                    b.Property<bool?>("HightNetWorkPression")
                        .HasColumnType("bit");

                    b.Property<bool?>("HightNetworkBar5")
                        .HasColumnType("bit")
                        .HasColumnName("hightNetworkBar5");

                    b.Property<bool?>("HightNetworkBar9")
                        .HasColumnType("bit")
                        .HasColumnName("hightNetworkBar9");

                    b.Property<bool?>("HightNetworkPressureBar5")
                        .HasColumnType("bit")
                        .HasColumnName("hightNetworkPressureBar5");

                    b.Property<bool?>("HightNetworkPressureBar9")
                        .HasColumnType("bit")
                        .HasColumnName("hightNetworkPressureBar9");

                    b.Property<bool?>("HightO2airAmbiant")
                        .HasColumnType("bit")
                        .HasColumnName("hightO2AirAmbiant");

                    b.Property<bool?>("HightO2airMedical")
                        .HasColumnType("bit")
                        .HasColumnName("hightO2AirMedical");

                    b.Property<double?>("HourCounterDryerX")
                        .HasColumnType("float");

                    b.Property<double?>("HourCounterDryerY")
                        .HasColumnType("float");

                    b.Property<double?>("HourCounterPompA")
                        .HasColumnType("float");

                    b.Property<double?>("HourCounterPompB")
                        .HasColumnType("float");

                    b.Property<double?>("HourCounterPompC")
                        .HasColumnType("float");

                    b.Property<double?>("HourCounterPompD")
                        .HasColumnType("float");

                    b.Property<double?>("HourCounterPompE")
                        .HasColumnType("float");

                    b.Property<double?>("HourCounterPompF")
                        .HasColumnType("float");

                    b.Property<bool?>("Hpaalarm")
                        .HasColumnType("bit")
                        .HasColumnName("HPAAlarm");

                    b.Property<bool?>("Hpbalarm")
                        .HasColumnType("bit")
                        .HasColumnName("HPBAlarm");

                    b.Property<bool?>("HsboxTempSansor")
                        .HasColumnType("bit")
                        .HasColumnName("HSBoxTempSansor");

                    b.Property<double?>("Humidity")
                        .HasColumnType("float");

                    b.Property<bool?>("HumidityA")
                        .HasColumnType("bit");

                    b.Property<bool?>("HumidityB")
                        .HasColumnType("bit");

                    b.Property<double?>("Hygrometry")
                        .HasColumnType("float")
                        .HasColumnName("hygrometry");

                    b.Property<bool?>("HygrometryAlarm")
                        .HasColumnType("bit");

                    b.Property<bool?>("HygrometryLineA")
                        .HasColumnType("bit")
                        .HasColumnName("hygrometryLineA");

                    b.Property<bool?>("HygrometryLineB")
                        .HasColumnType("bit")
                        .HasColumnName("hygrometryLineB");

                    b.Property<bool?>("HygrometryLineC")
                        .HasColumnType("bit")
                        .HasColumnName("hygrometryLineC");

                    b.Property<bool?>("HygrometryLineD")
                        .HasColumnType("bit")
                        .HasColumnName("hygrometryLineD");

                    b.Property<bool?>("IgnOn")
                        .HasColumnType("bit");

                    b.Property<bool?>("Input1")
                        .HasColumnType("bit");

                    b.Property<bool?>("Input2")
                        .HasColumnType("bit");

                    b.Property<bool?>("Input3")
                        .HasColumnType("bit");

                    b.Property<bool?>("InputAuboosterHp")
                        .HasColumnType("bit")
                        .HasColumnName("inputAUBoosterHp");

                    b.Property<bool?>("InputBekoFaultA")
                        .HasColumnType("bit")
                        .HasColumnName("inputBekoFaultA");

                    b.Property<bool?>("InputBekoFaultB")
                        .HasColumnType("bit")
                        .HasColumnName("inputBekoFaultB");

                    b.Property<bool?>("InputBekoFaultC")
                        .HasColumnType("bit")
                        .HasColumnName("inputBekoFaultC");

                    b.Property<bool?>("InputBekoFaultD")
                        .HasColumnType("bit")
                        .HasColumnName("inputBekoFaultD");

                    b.Property<bool?>("InputDefaultTempDryerA")
                        .HasColumnType("bit")
                        .HasColumnName("inputDefaultTempDryerA");

                    b.Property<bool?>("InputDefaultTempDryerB")
                        .HasColumnType("bit")
                        .HasColumnName("inputDefaultTempDryerB");

                    b.Property<bool?>("InputDefaultTempDryerC")
                        .HasColumnType("bit")
                        .HasColumnName("inputDefaultTempDryerC");

                    b.Property<bool?>("InputDefaultTempDryerD")
                        .HasColumnType("bit")
                        .HasColumnName("inputDefaultTempDryerD");

                    b.Property<bool?>("InputExternalCo2fault")
                        .HasColumnType("bit")
                        .HasColumnName("inputExternalCO2Fault");

                    b.Property<bool?>("InputExternalCofault")
                        .HasColumnType("bit")
                        .HasColumnName("inputExternalCOFault");

                    b.Property<bool?>("InputMaboosterHp")
                        .HasColumnType("bit")
                        .HasColumnName("inputMABoosterHp");

                    b.Property<bool?>("InputPca")
                        .HasColumnType("bit")
                        .HasColumnName("InputPCA");

                    b.Property<bool?>("InputPressureSwitchX")
                        .HasColumnType("bit");

                    b.Property<bool?>("InputPressureSwitchY")
                        .HasColumnType("bit");

                    b.Property<bool?>("InputRotationDirection")
                        .HasColumnType("bit");

                    b.Property<double?>("Intensity")
                        .HasColumnType("float");

                    b.Property<bool?>("IntensityAlarm")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsKeepAlive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsValid")
                        .HasColumnType("bit");

                    b.Property<int?>("LastAlertType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(-1);

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Level1")
                        .HasColumnType("float");

                    b.Property<double?>("Level2")
                        .HasColumnType("float");

                    b.Property<double?>("Level3")
                        .HasColumnType("float");

                    b.Property<double?>("Level4")
                        .HasColumnType("float");

                    b.Property<double?>("Level5")
                        .HasColumnType("float");

                    b.Property<double?>("Level6")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<bool?>("LowLocalTemp")
                        .HasColumnType("bit")
                        .HasColumnName("lowLocalTemp");

                    b.Property<bool?>("LowNetWorkPression")
                        .HasColumnType("bit");

                    b.Property<bool?>("LowNetworkBar5")
                        .HasColumnType("bit")
                        .HasColumnName("lowNetworkBar5");

                    b.Property<bool?>("LowNetworkBar9")
                        .HasColumnType("bit")
                        .HasColumnName("lowNetworkBar9");

                    b.Property<bool?>("LowNetworkC2v")
                        .HasColumnType("bit")
                        .HasColumnName("lowNetworkC2V");

                    b.Property<bool?>("LowNetworkPressureBar5")
                        .HasColumnType("bit")
                        .HasColumnName("lowNetworkPressureBar5");

                    b.Property<bool?>("LowNetworkPressureBar9")
                        .HasColumnType("bit")
                        .HasColumnName("lowNetworkPressureBar9");

                    b.Property<bool?>("LowO2airAmbiant")
                        .HasColumnType("bit")
                        .HasColumnName("lowO2AirAmbiant");

                    b.Property<bool?>("LowO2airMedical")
                        .HasColumnType("bit")
                        .HasColumnName("lowO2AirMedical");

                    b.Property<bool?>("LowTempFaultA")
                        .HasColumnType("bit")
                        .HasColumnName("lowTempFaultA");

                    b.Property<bool?>("LowTempFaultB")
                        .HasColumnType("bit")
                        .HasColumnName("lowTempFaultB");

                    b.Property<bool?>("LowTempFaultC")
                        .HasColumnType("bit")
                        .HasColumnName("lowTempFaultC");

                    b.Property<bool?>("LowTempFaultD")
                        .HasColumnType("bit")
                        .HasColumnName("lowTempFaultD");

                    b.Property<bool?>("LowTempFaultE")
                        .HasColumnType("bit")
                        .HasColumnName("lowTempFaultE");

                    b.Property<bool?>("LowTempFaultF")
                        .HasColumnType("bit")
                        .HasColumnName("lowTempFaultF");

                    b.Property<bool?>("LowTemperatureAlarm")
                        .HasColumnType("bit")
                        .HasColumnName("lowTemperatureAlarm");

                    b.Property<bool?>("LowVoltage")
                        .HasColumnType("bit")
                        .HasColumnName("lowVoltage");

                    b.Property<bool?>("MemorizedAlert")
                        .HasColumnType("bit");

                    b.Property<double?>("Mileage")
                        .HasColumnType("float");

                    b.Property<bool?>("NOalarm")
                        .HasColumnType("bit")
                        .HasColumnName("nOAlarm");

                    b.Property<double?>("Network5Bar")
                        .HasColumnType("float")
                        .HasColumnName("network5Bar");

                    b.Property<bool?>("NetworkSpeedAlarm")
                        .HasColumnType("bit");

                    b.Property<bool?>("No2alarm")
                        .HasColumnType("bit")
                        .HasColumnName("NO2Alarm");

                    b.Property<bool?>("No2offAlarm")
                        .HasColumnType("bit")
                        .HasColumnName("NO2OffAlarm");

                    b.Property<bool?>("NooffAlarm")
                        .HasColumnType("bit")
                        .HasColumnName("NOOffAlarm");

                    b.Property<bool?>("OffScaleC1v")
                        .HasColumnType("bit");

                    b.Property<bool?>("OffScaleC2v")
                        .HasColumnType("bit");

                    b.Property<bool?>("OffScaleC3a")
                        .HasColumnType("bit")
                        .HasColumnName("OffScaleC3A");

                    b.Property<bool?>("OffScaleTempAmbient")
                        .HasColumnType("bit");

                    b.Property<bool?>("OffScaleTempPompA")
                        .HasColumnType("bit");

                    b.Property<bool?>("OffScaleTempPompB")
                        .HasColumnType("bit");

                    b.Property<bool?>("OffScaleTempPompC")
                        .HasColumnType("bit");

                    b.Property<bool?>("OffScaleTempPompD")
                        .HasColumnType("bit");

                    b.Property<bool?>("OffScaleTempPompE")
                        .HasColumnType("bit");

                    b.Property<bool?>("OffScaleTempPompF")
                        .HasColumnType("bit");

                    b.Property<bool?>("OilLvlFaultA")
                        .HasColumnType("bit");

                    b.Property<bool?>("OilLvlFaultB")
                        .HasColumnType("bit");

                    b.Property<bool?>("OilLvlFaultC")
                        .HasColumnType("bit");

                    b.Property<bool?>("OilLvlFaultD")
                        .HasColumnType("bit");

                    b.Property<bool?>("OilLvlFaultE")
                        .HasColumnType("bit");

                    b.Property<bool?>("OilLvlFaultF")
                        .HasColumnType("bit");

                    b.Property<bool?>("OilLvlFaultOrAuxa")
                        .HasColumnType("bit")
                        .HasColumnName("OilLvlFaultOrAUXA");

                    b.Property<bool?>("OilLvlFaultOrAuxb")
                        .HasColumnType("bit")
                        .HasColumnName("OilLvlFaultOrAUXB");

                    b.Property<bool?>("OilLvlFaultOrAuxc")
                        .HasColumnType("bit")
                        .HasColumnName("OilLvlFaultOrAUXC");

                    b.Property<bool?>("OnDryerX")
                        .HasColumnType("bit");

                    b.Property<bool?>("OnDryerY")
                        .HasColumnType("bit");

                    b.Property<bool?>("OnMove")
                        .HasColumnType("bit");

                    b.Property<long?>("OtherInfo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<bool?>("OverCurrentAlarm")
                        .HasColumnType("bit");

                    b.Property<bool?>("OverVoltageAlarm")
                        .HasColumnType("bit");

                    b.Property<bool?>("PlafonnementAlarm")
                        .HasColumnType("bit")
                        .HasColumnName("plafonnementAlarm");

                    b.Property<bool?>("PompAon")
                        .HasColumnType("bit")
                        .HasColumnName("PompAON");

                    b.Property<bool?>("PompBon")
                        .HasColumnType("bit")
                        .HasColumnName("PompBON");

                    b.Property<bool?>("PompCon")
                        .HasColumnType("bit")
                        .HasColumnName("PompCON");

                    b.Property<bool?>("PompDon")
                        .HasColumnType("bit")
                        .HasColumnName("PompDON");

                    b.Property<bool?>("PompEon")
                        .HasColumnType("bit")
                        .HasColumnName("PompEON");

                    b.Property<bool?>("PompFon")
                        .HasColumnType("bit")
                        .HasColumnName("PompFON");

                    b.Property<bool?>("PompReturnedOnA")
                        .HasColumnType("bit");

                    b.Property<bool?>("PompReturnedOnB")
                        .HasColumnType("bit");

                    b.Property<bool?>("PompReturnedOnC")
                        .HasColumnType("bit");

                    b.Property<bool?>("PompReturnedOnD")
                        .HasColumnType("bit");

                    b.Property<bool?>("PompReturnedOnE")
                        .HasColumnType("bit");

                    b.Property<bool?>("PompReturnedOnF")
                        .HasColumnType("bit");

                    b.Property<double?>("Power")
                        .HasColumnType("float");

                    b.Property<bool?>("PreAlarmTempPumpA")
                        .HasColumnType("bit");

                    b.Property<bool?>("PreAlarmTempPumpB")
                        .HasColumnType("bit");

                    b.Property<bool?>("PreAlarmTempPumpC")
                        .HasColumnType("bit");

                    b.Property<bool?>("PreAlarmTempPumpD")
                        .HasColumnType("bit");

                    b.Property<bool?>("PreAlarmTempPumpE")
                        .HasColumnType("bit");

                    b.Property<bool?>("PreAlarmTempPumpF")
                        .HasColumnType("bit");

                    b.Property<double?>("Pressure1")
                        .HasColumnType("float");

                    b.Property<double?>("Pressure2")
                        .HasColumnType("float");

                    b.Property<double?>("Pressure3")
                        .HasColumnType("float");

                    b.Property<double?>("Pressure4")
                        .HasColumnType("float");

                    b.Property<double?>("Pressure5")
                        .HasColumnType("float");

                    b.Property<double?>("Pressure6")
                        .HasColumnType("float");

                    b.Property<bool?>("PressureBouteilleA")
                        .HasColumnType("bit");

                    b.Property<double?>("PressureBouteilleAvalue")
                        .HasColumnType("float")
                        .HasColumnName("PressureBouteilleAValue");

                    b.Property<bool?>("PressureBouteilleB")
                        .HasColumnType("bit");

                    b.Property<double?>("PressureBouteilleBvalue")
                        .HasColumnType("float")
                        .HasColumnName("PressureBouteilleBValue");

                    b.Property<double?>("PressureC1a")
                        .HasColumnType("float")
                        .HasColumnName("pressureC1A");

                    b.Property<double?>("PressureC1v")
                        .HasColumnType("float")
                        .HasColumnName("pressureC1V");

                    b.Property<double?>("PressureC2a")
                        .HasColumnType("float")
                        .HasColumnName("pressureC2A");

                    b.Property<double?>("PressureC2v")
                        .HasColumnType("float")
                        .HasColumnName("pressureC2V");

                    b.Property<double?>("PressureC3a")
                        .HasColumnType("float")
                        .HasColumnName("PressureC3A");

                    b.Property<double?>("PressureC4a")
                        .HasColumnType("float")
                        .HasColumnName("pressureC4A");

                    b.Property<double?>("PressureC5a")
                        .HasColumnType("float")
                        .HasColumnName("pressureC5A");

                    b.Property<double?>("PressureReg")
                        .HasColumnType("float");

                    b.Property<int>("RecordType")
                        .HasColumnType("int");

                    b.Property<bool?>("RegulationAlarm")
                        .HasColumnType("bit");

                    b.Property<bool?>("ReturnCompressorOna")
                        .HasColumnType("bit")
                        .HasColumnName("returnCompressorONA");

                    b.Property<bool?>("ReturnCompressorOnb")
                        .HasColumnType("bit")
                        .HasColumnName("returnCompressorONB");

                    b.Property<bool?>("ReturnCompressorOnc")
                        .HasColumnType("bit")
                        .HasColumnName("returnCompressorONC");

                    b.Property<bool?>("ReturnCompressorOnd")
                        .HasColumnType("bit")
                        .HasColumnName("returnCompressorOND");

                    b.Property<bool?>("ReturnCompressorOne")
                        .HasColumnType("bit")
                        .HasColumnName("ReturnCompressorONE");

                    b.Property<bool?>("ReturnCompressorOnf")
                        .HasColumnType("bit")
                        .HasColumnName("ReturnCompressorONF");

                    b.Property<bool?>("RotationDefaultCompressorXy")
                        .HasColumnType("bit")
                        .HasColumnName("RotationDefaultCompressorXY");

                    b.Property<int?>("Rpm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("RPM");

                    b.Property<bool?>("S1aoffHygromtry")
                        .HasColumnType("bit")
                        .HasColumnName("S1AOffHygromtry");

                    b.Property<double?>("SansorCo")
                        .HasColumnType("float")
                        .HasColumnName("sansorCO");

                    b.Property<double?>("SansorCo2")
                        .HasColumnType("float")
                        .HasColumnName("sansorCO2");

                    b.Property<double?>("SensorCo2ambiant")
                        .HasColumnType("float")
                        .HasColumnName("SensorCO2Ambiant");

                    b.Property<double?>("SensorCo2medical")
                        .HasColumnType("float")
                        .HasColumnName("SensorCO2Medical");

                    b.Property<double?>("SensorNo")
                        .HasColumnType("float")
                        .HasColumnName("SensorNO");

                    b.Property<double?>("SensorNo2")
                        .HasColumnType("float")
                        .HasColumnName("SensorNO2");

                    b.Property<double?>("SensorO2")
                        .HasColumnType("float");

                    b.Property<double?>("SensorSo2")
                        .HasColumnType("float")
                        .HasColumnName("SensorSO2");

                    b.Property<bool?>("Sent")
                        .HasColumnType("bit");

                    b.Property<bool?>("Shutter")
                        .HasColumnType("bit");

                    b.Property<bool?>("So2alarm")
                        .HasColumnType("bit")
                        .HasColumnName("SO2Alarm");

                    b.Property<bool?>("So2offAlarm")
                        .HasColumnType("bit")
                        .HasColumnName("SO2OffAlarm");

                    b.Property<short>("Speed")
                        .HasColumnType("smallint");

                    b.Property<bool?>("SpeedVariatorDefault")
                        .HasColumnType("bit");

                    b.Property<long>("Status")
                        .HasColumnType("bigint");

                    b.Property<bool?>("SynthesisAlarm")
                        .HasColumnType("bit");

                    b.Property<string>("TachographData")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<double?>("TempLocal")
                        .HasColumnType("float");

                    b.Property<double?>("TempMileage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<double?>("TempPompA")
                        .HasColumnType("float");

                    b.Property<double?>("TempPompB")
                        .HasColumnType("float");

                    b.Property<double?>("TempPompC")
                        .HasColumnType("float");

                    b.Property<double?>("TempPompD")
                        .HasColumnType("float");

                    b.Property<double?>("TempPompE")
                        .HasColumnType("float");

                    b.Property<double?>("TempPompF")
                        .HasColumnType("float");

                    b.Property<double?>("Temperature")
                        .HasColumnType("float");

                    b.Property<double?>("Tension")
                        .HasColumnType("float");

                    b.Property<double?>("TotalFuel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<int?>("TotalReceivedBytesFromServer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int?>("TotalSendBytes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool?>("TrapBekoProblemA")
                        .HasColumnType("bit")
                        .HasColumnName("trapBekoProblemA");

                    b.Property<bool?>("TrapBekoProblemB")
                        .HasColumnType("bit")
                        .HasColumnName("trapBekoProblemB");

                    b.Property<bool?>("TrapBekoProblemC")
                        .HasColumnType("bit")
                        .HasColumnName("trapBekoProblemC");

                    b.Property<bool?>("TrapBekoProblemD")
                        .HasColumnType("bit")
                        .HasColumnName("trapBekoProblemD");

                    b.Property<long?>("TripLot")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<bool?>("UnderPressure")
                        .HasColumnType("bit");

                    b.Property<bool?>("UnderVoltageAlarm")
                        .HasColumnType("bit");

                    b.Property<bool?>("VacuostatAlarm")
                        .HasColumnType("bit");

                    b.Property<bool?>("VacuostatPsXalarm")
                        .HasColumnType("bit")
                        .HasColumnName("VacuostatPsXAlarm");

                    b.Property<bool?>("VacuostatPsYalarm")
                        .HasColumnType("bit")
                        .HasColumnName("VacuostatPsYAlarm");

                    b.Property<string>("VehiculeWeight")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<bool?>("VeryHighTempAlarm")
                        .HasColumnType("bit");

                    b.Property<double?>("Voie1")
                        .HasColumnType("float")
                        .HasColumnName("voie1");

                    b.Property<double?>("Voie2")
                        .HasColumnType("float")
                        .HasColumnName("voie2");

                    b.Property<double?>("Voie3")
                        .HasColumnType("float")
                        .HasColumnName("voie3");

                    b.Property<double?>("Voie4")
                        .HasColumnType("float")
                        .HasColumnName("voie4");

                    b.Property<double?>("Voie5")
                        .HasColumnType("float")
                        .HasColumnName("voie5");

                    b.Property<double?>("Voie6")
                        .HasColumnType("float")
                        .HasColumnName("voie6");

                    b.Property<double?>("Voie7")
                        .HasColumnType("float")
                        .HasColumnName("voie7");

                    b.Property<double?>("X")
                        .HasColumnType("float");

                    b.Property<double?>("Y")
                        .HasColumnType("float");

                    b.HasKey("Equipment");

                    b.ToTable("Refresh", (string)null);
                });

            modelBuilder.Entity("Domain.models.RefreshStatisticDatum", b =>
                {
                    b.Property<string>("Equipment")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<DateTime?>("AcquisitionTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("BeginStatisticDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("TotalSendBytes")
                        .HasColumnType("int");

                    b.HasKey("Equipment");

                    b.ToTable("RefreshStatisticData");
                });

            modelBuilder.Entity("Domain.models.RepairMaintenanceLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccidentDetails")
                        .HasColumnType("int");

                    b.Property<int?>("Car")
                        .HasColumnType("int");

                    b.Property<double?>("Cost")
                        .HasColumnType("float");

                    b.Property<int?>("Customer")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCompletionGmt")
                        .HasColumnType("datetime")
                        .HasColumnName("DateCompletionGMT");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<double?>("EngineHoursCompletion")
                        .HasColumnType("float");

                    b.Property<string>("InvoiceReference")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<int?>("MaintenanceReminder")
                        .HasColumnType("int");

                    b.Property<int?>("MaintenanceType")
                        .HasColumnType("int");

                    b.Property<double?>("MileageCompletion")
                        .HasColumnType("float");

                    b.Property<double?>("PaidCost")
                        .HasColumnType("float");

                    b.Property<DateTime?>("PaidDateGmt")
                        .HasColumnType("datetime")
                        .HasColumnName("PaidDateGMT");

                    b.Property<string>("Supplier")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.HasKey("Id");

                    b.ToTable("RepairMaintenanceLog", (string)null);
                });

            modelBuilder.Entity("Domain.models.Requête", b =>
                {
                    b.Property<double?>("Acceleration")
                        .HasColumnType("float");

                    b.Property<DateTime>("AcquisitionTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("AdcVoltage")
                        .HasColumnType("int")
                        .HasColumnName("ADC_Voltage");

                    b.Property<int?>("AnalogInput1")
                        .HasColumnType("int");

                    b.Property<int?>("AnalogInput2")
                        .HasColumnType("int");

                    b.Property<int?>("AnalogInput3")
                        .HasColumnType("int");

                    b.Property<int?>("AnalogInput4")
                        .HasColumnType("int");

                    b.Property<short>("Direction")
                        .HasColumnType("smallint");

                    b.Property<int>("Distance")
                        .HasColumnType("int");

                    b.Property<string>("Equipment")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<short?>("FuelLevel")
                        .HasColumnType("smallint");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<double?>("Mileage")
                        .HasColumnType("float");

                    b.Property<bool?>("OnMove")
                        .HasColumnType("bit");

                    b.Property<int>("RecordType")
                        .HasColumnType("int");

                    b.Property<short>("Speed")
                        .HasColumnType("smallint");

                    b.Property<long>("Status")
                        .HasColumnType("bigint");

                    b.Property<short>("Temperature")
                        .HasColumnType("smallint");

                    b.Property<double?>("X")
                        .HasColumnType("float");

                    b.Property<double?>("Y")
                        .HasColumnType("float");

                    b.ToTable("Requête", (string)null);
                });

            modelBuilder.Entity("Domain.models.ServerQuery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Account")
                        .HasColumnType("int");

                    b.Property<short?>("Csport")
                        .HasColumnType("smallint")
                        .HasColumnName("CSPort");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("Equipment")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<int>("ExternalId")
                        .HasColumnType("int");

                    b.Property<string>("Hcsname")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("HCSName")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("Param1")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("Param2")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("Param3")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("Param4")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("Param5")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("Param6")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<DateTime>("PostingTime")
                        .HasColumnType("datetime");

                    b.Property<int>("QueryState")
                        .HasColumnType("int");

                    b.Property<int>("QueryType")
                        .HasColumnType("int");

                    b.Property<string>("ResponseMessage")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<int?>("TelTonikaProfile")
                        .HasColumnType("int");

                    b.Property<int?>("TimeOut")
                        .HasColumnType("int");

                    b.Property<int?>("TrackingTarget")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Equipment", "QueryState", "QueryType" }, "IX_ServerQuery");

                    b.ToTable("ServerQuery", (string)null);
                });

            modelBuilder.Entity("Domain.models.Smsconfig", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("TelNumber")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_SMSConfig_1");

                    b.ToTable("SMSConfig", (string)null);
                });

            modelBuilder.Entity("Domain.models.SmsmailChange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChangeType")
                        .HasColumnType("int");

                    b.Property<int?>("Customer")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PostingTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("SmsmailConfig")
                        .HasColumnType("int")
                        .HasColumnName("SMSMailConfig");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("SMSMailChange", (string)null);
                });

            modelBuilder.Entity("Domain.models.SmsmailConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AlertType")
                        .HasColumnType("int");

                    b.Property<string>("Equipment")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<int?>("ExternalId")
                        .HasColumnType("int");

                    b.Property<bool?>("Send")
                        .HasColumnType("bit");

                    b.Property<bool?>("SendOrNot")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("('0')");

                    b.Property<int?>("SendingPeriod")
                        .HasColumnType("int");

                    b.Property<int?>("TankId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_SMSConfig");

                    b.ToTable("SMSMailConfig", (string)null);
                });

            modelBuilder.Entity("Domain.models.SmsstateOfSendingAlert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Customer")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SendingTimeGmt")
                        .HasColumnType("datetime")
                        .HasColumnName("SendingTimeGMT");

                    b.Property<string>("Smscontent")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("SMSContent")
                        .UseCollation("French_CI_AS");

                    b.Property<int?>("State")
                        .HasColumnType("int");

                    b.Property<int?>("TelNumber")
                        .HasColumnType("int");

                    b.Property<string>("TelNumberStr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<int?>("TelNumberType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Customer", "SendingTimeGmt", "TelNumber" }, "IX_SMSStateOfSendingAlert");

                    b.HasIndex(new[] { "Customer", "SendingTimeGmt", "TelNumberType", "State" }, "IX_SMSState_Cust_Equ_State_TelType");

                    b.ToTable("SMSStateOfSendingAlert", (string)null);
                });

            modelBuilder.Entity("Domain.models.StandardPlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DelegId")
                        .HasColumnType("int")
                        .HasColumnName("Deleg_Id");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<int?>("GovId")
                        .HasColumnType("int")
                        .HasColumnName("Gov_Id");

                    b.Property<string>("Icon")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<double?>("X")
                        .HasColumnType("float");

                    b.Property<double?>("Y")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("StandardPlace", (string)null);
                });

            modelBuilder.Entity("Domain.models.StandardPlace1", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DelegId")
                        .HasColumnType("int")
                        .HasColumnName("Deleg_Id");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<int?>("GovId")
                        .HasColumnType("int")
                        .HasColumnName("Gov_Id");

                    b.Property<string>("Icon")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<double?>("X")
                        .HasColumnType("float");

                    b.Property<double?>("Y")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("StandardPlace1", (string)null);
                });

            modelBuilder.Entity("Domain.models.StandardPlaceBackUp", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("DelegId")
                        .HasColumnType("int")
                        .HasColumnName("Deleg_Id");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<int?>("GovId")
                        .HasColumnType("int")
                        .HasColumnName("Gov_Id");

                    b.Property<string>("Icon")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<double?>("X")
                        .HasColumnType("float");

                    b.Property<double?>("Y")
                        .HasColumnType("float");

                    b.HasKey("Id")
                        .HasName("PK_StandardPlace2");

                    b.ToTable("StandardPlaceBackUp", (string)null);
                });

            modelBuilder.Entity("Domain.models.StatisticAnomaly", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Month")
                        .HasColumnType("int");

                    b.Property<int?>("TotalDetectedClientDisconnected")
                        .HasColumnType("int");

                    b.Property<int?>("TotalDetectedEquipmentDisconnected")
                        .HasColumnType("int");

                    b.Property<int?>("TotalInterventionClientDisconnected")
                        .HasColumnType("int");

                    b.Property<int?>("TotalInterventionEquipmentDisconnected")
                        .HasColumnType("int");

                    b.Property<int?>("TotalResolvedClientDisconnected")
                        .HasColumnType("int");

                    b.Property<int?>("TotalResolvedEquipmentDisconnected")
                        .HasColumnType("int");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Statistic");

                    b.ToTable("StatisticAnomaly", (string)null);
                });

            modelBuilder.Entity("Domain.models.StatisticDataold", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AcquisitionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Equipment")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<int?>("TotalSendBytes")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_StatisticData");

                    b.ToTable("StatisticDataold", (string)null);
                });

            modelBuilder.Entity("Domain.models.StatisticDatum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AcquisitionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Equipment")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<int?>("TotalSendBytes")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_StatisticData1");

                    b.HasIndex(new[] { "AcquisitionTime", "Equipment" }, "IX_StatisticData_Acqu_Eq");

                    b.ToTable("StatisticData");
                });

            modelBuilder.Entity("Domain.models.StatisticHour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Distance")
                        .HasColumnType("float");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Equipment")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<short>("FuelConsom")
                        .HasColumnType("smallint");

                    b.Property<short>("MaxSpeed")
                        .HasColumnType("smallint");

                    b.Property<short>("OverSpeedNbr")
                        .HasColumnType("smallint");

                    b.Property<short>("SpeedAvg")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("TrackingTarget")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_StatisticHour_1");

                    b.HasIndex("TrackingTarget");

                    b.ToTable("StatisticHour", (string)null);
                });

            modelBuilder.Entity("Domain.models.StatisticsFuelConsumption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Equipment")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<double?>("FuelConsumption")
                        .HasColumnType("float");

                    b.Property<double?>("MaxFuelLevel")
                        .HasColumnType("float");

                    b.Property<DateTime?>("MaxFuelLevelDateGmt")
                        .HasColumnType("datetime")
                        .HasColumnName("MaxFuelLevelDateGMT");

                    b.Property<double?>("MaxTemperature")
                        .HasColumnType("float");

                    b.Property<DateTime?>("MaxTemperatureDateGmt")
                        .HasColumnType("datetime")
                        .HasColumnName("MaxTemperatureDateGMT");

                    b.Property<double?>("MinFuelLevel")
                        .HasColumnType("float");

                    b.Property<DateTime?>("MinFuelLevelDateGmt")
                        .HasColumnType("datetime")
                        .HasColumnName("MinFuelLevelDateGMT");

                    b.Property<double?>("MinTemperature")
                        .HasColumnType("float");

                    b.Property<DateTime?>("MinTemperatureDateGmt")
                        .HasColumnType("datetime")
                        .HasColumnName("MinTemperatureDateGMT");

                    b.Property<double?>("Refueling")
                        .HasColumnType("float");

                    b.Property<DateTime?>("StatisticsDateGmt")
                        .HasColumnType("datetime")
                        .HasColumnName("StatisticsDateGMT");

                    b.HasKey("Id");

                    b.ToTable("StatisticsFuelConsumption", (string)null);
                });

            modelBuilder.Entity("Domain.models.StopRun", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("datetime");

                    b.Property<double>("Distance")
                        .HasColumnType("float");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Equipment")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .UseCollation("French_CI_AS");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<int>("TrackingTarget")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Table_2");

                    b.HasIndex("TrackingTarget");

                    b.ToTable("StopRun", (string)null);
                });

            modelBuilder.Entity("Domain.models.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<DateTime?>("SaveDate")
                        .HasColumnType("datetime");

                    b.Property<short?>("Type")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Supplier", (string)null);
                });

            modelBuilder.Entity("Domain.models.TankFullConsumption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AcquisitionTime")
                        .HasColumnType("datetime");

                    b.Property<double?>("Consumption")
                        .HasColumnType("float");

                    b.Property<double?>("ConsumptionPercent")
                        .HasColumnType("float");

                    b.Property<string>("Equipment")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("NumTank")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_TankFullConception_1");

                    b.ToTable("TankFullConsumption", (string)null);
                });

            modelBuilder.Entity("Domain.models.TankLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CardCoupon")
                        .HasColumnType("int");

                    b.Property<double?>("OperationCapacityInL")
                        .HasColumnType("float");

                    b.Property<DateTime?>("OperationDateGmt")
                        .HasColumnType("datetime")
                        .HasColumnName("OperationDateGMT");

                    b.Property<short?>("OperationType")
                        .HasColumnType("smallint");

                    b.Property<int?>("Tank")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TankLog", (string)null);
                });

            modelBuilder.Entity("Domain.models.TankPump", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CalibrationVoie1")
                        .HasColumnType("int");

                    b.Property<int?>("CalibrationVoie2")
                        .HasColumnType("int");

                    b.Property<int?>("CalibrationVoie3")
                        .HasColumnType("int");

                    b.Property<int?>("CalibrationVoie4")
                        .HasColumnType("int");

                    b.Property<int?>("CalibrationVoie5")
                        .HasColumnType("int");

                    b.Property<int?>("CalibrationVoie6")
                        .HasColumnType("int");

                    b.Property<int?>("CalibrationVoie7")
                        .HasColumnType("int");

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<int?>("CapacityVoie1")
                        .HasColumnType("int");

                    b.Property<int?>("CapacityVoie2")
                        .HasColumnType("int");

                    b.Property<int?>("CapacityVoie3")
                        .HasColumnType("int");

                    b.Property<int?>("CapacityVoie4")
                        .HasColumnType("int");

                    b.Property<int?>("CapacityVoie5")
                        .HasColumnType("int");

                    b.Property<int?>("CapacityVoie6")
                        .HasColumnType("int");

                    b.Property<int?>("CapacityVoie7")
                        .HasColumnType("int");

                    b.Property<int?>("Customer")
                        .HasColumnType("int");

                    b.Property<string>("Equipment")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<short?>("FuelContainerCapacityInL")
                        .HasColumnType("smallint");

                    b.Property<double?>("FuelLevelInL")
                        .HasColumnType("float");

                    b.Property<short?>("FuelType")
                        .HasColumnType("smallint");

                    b.Property<double?>("HighPression")
                        .HasColumnType("float");

                    b.Property<double?>("HighPressionVoie1")
                        .HasColumnType("float");

                    b.Property<double?>("HighPressionVoie2")
                        .HasColumnType("float");

                    b.Property<double?>("HighPressionVoie3")
                        .HasColumnType("float");

                    b.Property<double?>("HighPressionVoie4")
                        .HasColumnType("float");

                    b.Property<double?>("HighPressionVoie5")
                        .HasColumnType("float");

                    b.Property<double?>("HighPressionVoie6")
                        .HasColumnType("float");

                    b.Property<double?>("HighPressionVoie7")
                        .HasColumnType("float");

                    b.Property<double?>("LowLevel")
                        .HasColumnType("float");

                    b.Property<double?>("LowLevelVoie1")
                        .HasColumnType("float");

                    b.Property<double?>("LowLevelVoie2")
                        .HasColumnType("float");

                    b.Property<double?>("LowLevelVoie3")
                        .HasColumnType("float");

                    b.Property<double?>("LowLevelVoie4")
                        .HasColumnType("float");

                    b.Property<double?>("LowLevelVoie5")
                        .HasColumnType("float");

                    b.Property<double?>("LowLevelVoie6")
                        .HasColumnType("float");

                    b.Property<double?>("LowLevelVoie7")
                        .HasColumnType("float");

                    b.Property<double?>("LowPression")
                        .HasColumnType("float");

                    b.Property<double?>("LowPressionVoie1")
                        .HasColumnType("float");

                    b.Property<double?>("LowPressionVoie2")
                        .HasColumnType("float");

                    b.Property<double?>("LowPressionVoie3")
                        .HasColumnType("float");

                    b.Property<double?>("LowPressionVoie4")
                        .HasColumnType("float");

                    b.Property<double?>("LowPressionVoie5")
                        .HasColumnType("float");

                    b.Property<double?>("LowPressionVoie6")
                        .HasColumnType("float");

                    b.Property<double?>("LowPressionVoie7")
                        .HasColumnType("float");

                    b.Property<int?>("MaxValueVoie1")
                        .HasColumnType("int");

                    b.Property<int?>("MaxValueVoie2")
                        .HasColumnType("int");

                    b.Property<int?>("MaxValueVoie3")
                        .HasColumnType("int");

                    b.Property<int?>("MaxValueVoie4")
                        .HasColumnType("int");

                    b.Property<int?>("MaxValueVoie5")
                        .HasColumnType("int");

                    b.Property<int?>("MaxValueVoie6")
                        .HasColumnType("int");

                    b.Property<int?>("MaxValueVoie7")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("NameProduct")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                    b.Property<string>("NameVoie1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NameVoie2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NameVoie3")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NameVoie4")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NameVoie5")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NameVoie6")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NameVoie7")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("NumTank")
                        .HasColumnType("int");

                    b.Property<string>("PeriodOfDistribution")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PeriodOfOperation")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<double?>("PressureService")
                        .HasColumnType("float");

                    b.Property<string>("ReferenceTank")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("TotalFuelConsumptionInL")
                        .HasColumnType("float");

                    b.Property<string>("Type")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<short?>("TypeVoie1")
                        .HasColumnType("smallint");

                    b.Property<short?>("TypeVoie2")
                        .HasColumnType("smallint");

                    b.Property<short?>("TypeVoie3")
                        .HasColumnType("smallint");

                    b.Property<short?>("TypeVoie4")
                        .HasColumnType("smallint");

                    b.Property<short?>("TypeVoie5")
                        .HasColumnType("smallint");

                    b.Property<short?>("TypeVoie6")
                        .HasColumnType("smallint");

                    b.Property<short?>("TypeVoie7")
                        .HasColumnType("smallint");

                    b.Property<double?>("VeryHighPression")
                        .HasColumnType("float");

                    b.Property<double?>("VeryHighPressionVoie1")
                        .HasColumnType("float");

                    b.Property<double?>("VeryHighPressionVoie2")
                        .HasColumnType("float");

                    b.Property<double?>("VeryHighPressionVoie3")
                        .HasColumnType("float");

                    b.Property<double?>("VeryHighPressionVoie4")
                        .HasColumnType("float");

                    b.Property<double?>("VeryHighPressionVoie5")
                        .HasColumnType("float");

                    b.Property<double?>("VeryHighPressionVoie6")
                        .HasColumnType("float");

                    b.Property<double?>("VeryHighPressionVoie7")
                        .HasColumnType("float");

                    b.Property<double?>("VeryLowLevel")
                        .HasColumnType("float");

                    b.Property<double?>("VeryLowLevelVoie1")
                        .HasColumnType("float");

                    b.Property<double?>("VeryLowLevelVoie2")
                        .HasColumnType("float");

                    b.Property<double?>("VeryLowLevelVoie3")
                        .HasColumnType("float");

                    b.Property<double?>("VeryLowLevelVoie4")
                        .HasColumnType("float");

                    b.Property<double?>("VeryLowLevelVoie5")
                        .HasColumnType("float");

                    b.Property<double?>("VeryLowLevelVoie6")
                        .HasColumnType("float");

                    b.Property<double?>("VeryLowLevelVoie7")
                        .HasColumnType("float");

                    b.Property<double?>("VeryLowPression")
                        .HasColumnType("float");

                    b.Property<double?>("VeryLowPressionVoie1")
                        .HasColumnType("float");

                    b.Property<double?>("VeryLowPressionVoie2")
                        .HasColumnType("float");

                    b.Property<double?>("VeryLowPressionVoie3")
                        .HasColumnType("float");

                    b.Property<double?>("VeryLowPressionVoie4")
                        .HasColumnType("float");

                    b.Property<double?>("VeryLowPressionVoie5")
                        .HasColumnType("float");

                    b.Property<double?>("VeryLowPressionVoie6")
                        .HasColumnType("float");

                    b.Property<double?>("VeryLowPressionVoie7")
                        .HasColumnType("float");

                    b.Property<bool?>("Voie1")
                        .HasColumnType("bit");

                    b.Property<bool?>("Voie2")
                        .HasColumnType("bit");

                    b.Property<bool?>("Voie3")
                        .HasColumnType("bit");

                    b.Property<bool?>("Voie4")
                        .HasColumnType("bit");

                    b.Property<bool?>("Voie5")
                        .HasColumnType("bit");

                    b.Property<bool?>("Voie6")
                        .HasColumnType("bit");

                    b.Property<bool?>("Voie7")
                        .HasColumnType("bit");

                    b.HasKey("Id")
                        .HasName("PK_Tank");

                    b.ToTable("TankPump", (string)null);
                });

            modelBuilder.Entity("Domain.models.TelNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Customer")
                        .HasColumnType("int");

                    b.Property<int?>("ExternalId")
                        .HasColumnType("int");

                    b.Property<int?>("ExternalId2")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("Tel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<short?>("Type")
                        .HasColumnType("smallint");

                    b.HasKey("Id")
                        .HasName("PK_TelNumbers");

                    b.ToTable("TelNumber", (string)null);
                });

            modelBuilder.Entity("Domain.models.TelTonikaBuscandatum", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("AccelerationPedal")
                        .HasColumnType("int");

                    b.Property<int?>("EngineHours")
                        .HasColumnType("int");

                    b.Property<int?>("EngineRpm")
                        .HasColumnType("int")
                        .HasColumnName("EngineRPM");

                    b.Property<int?>("EngineTemperature")
                        .HasColumnType("int");

                    b.Property<int?>("FuelComsuption")
                        .HasColumnType("int");

                    b.Property<int?>("FuelLevel")
                        .HasColumnType("int");

                    b.Property<int?>("TotalDistance")
                        .HasColumnType("int");

                    b.Property<int?>("VehiculeSpeed")
                        .HasColumnType("int");

                    b.Property<int?>("VehiculeWeight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TelTonikaBUSCANData", (string)null);
                });

            modelBuilder.Entity("Domain.models.TempRefresh", b =>
                {
                    b.Property<string>("Equipment")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<DateTime>("AcquisitionTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("AdcVoltage")
                        .HasColumnType("int")
                        .HasColumnName("ADC_Voltage");

                    b.Property<bool?>("Connected")
                        .HasColumnType("bit");

                    b.Property<short>("Direction")
                        .HasColumnType("smallint");

                    b.Property<short?>("FuelLevel")
                        .HasColumnType("smallint");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<double?>("Mileage")
                        .HasColumnType("float");

                    b.Property<bool?>("OnMove")
                        .HasColumnType("bit");

                    b.Property<int>("RecordType")
                        .HasColumnType("int");

                    b.Property<bool?>("Sent")
                        .HasColumnType("bit");

                    b.Property<short>("Speed")
                        .HasColumnType("smallint");

                    b.Property<long>("Status")
                        .HasColumnType("bigint");

                    b.Property<double?>("TempMileage")
                        .HasColumnType("float");

                    b.Property<short>("Temperature")
                        .HasColumnType("smallint");

                    b.Property<double?>("X")
                        .HasColumnType("float");

                    b.Property<double?>("Y")
                        .HasColumnType("float");

                    b.HasKey("Equipment");

                    b.ToTable("TempRefresh", (string)null);
                });

            modelBuilder.Entity("Domain.models.TestWithError", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Accepted")
                        .HasColumnType("bit");

                    b.Property<bool>("Corrected")
                        .HasColumnType("bit");

                    b.Property<string>("CorrectedValue")
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("French_CI_AS");

                    b.Property<int>("Customer")
                        .HasColumnType("int");

                    b.Property<string>("DataEquipment")
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("DataInBase")
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("Equipment")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("InvalidData")
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("French_CI_AS");

                    b.Property<int?>("QueryTypeAll")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SavedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("SendedMail")
                        .HasColumnType("bit");

                    b.Property<string>("ShowType")
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("StandardValue")
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("French_CI_AS");

                    b.Property<int?>("TestedProblem")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TestWithError", (string)null);
                });

            modelBuilder.Entity("Domain.models.TestWithoutError", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Customer")
                        .HasColumnType("int");

                    b.Property<string>("Equipment")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<int?>("QueryTypeAll")
                        .HasColumnType("int");

                    b.Property<DateTime>("SavedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("TestedProblem")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TestWithoutError", (string)null);
                });

            modelBuilder.Entity("Domain.models.TimeZone", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("Period")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.HasKey("Name");

                    b.ToTable("TimeZone", (string)null);
                });

            modelBuilder.Entity("Domain.models.TrackingMode", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.HasKey("Id");

                    b.ToTable("TrackingMode", (string)null);
                });

            modelBuilder.Entity("Domain.models.TrackingTarget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Department")
                        .HasColumnType("int");

                    b.Property<int?>("ExternalId")
                        .HasColumnType("int");

                    b.Property<int?>("ExternalId2")
                        .HasColumnType("int");

                    b.Property<string>("Icon")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("TrajectoryHexColor")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("VisitingCustomerParam")
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("French_CI_AS");

                    b.HasKey("Id");

                    b.HasIndex("Department");

                    b.ToTable("TrackingTarget", (string)null);
                });

            modelBuilder.Entity("Domain.models.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("DestinationLatitude")
                        .HasColumnType("float");

                    b.Property<double>("DestinationLongitude")
                        .HasColumnType("float");

                    b.Property<string>("DestinationName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<int>("Distance")
                        .HasColumnType("int");

                    b.Property<int?>("Driver")
                        .HasColumnType("int");

                    b.Property<string>("Equipment")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<int?>("ExternalId")
                        .HasColumnType("int");

                    b.Property<int?>("ExternalId2")
                        .HasColumnType("int");

                    b.Property<int?>("GeometricShape")
                        .HasColumnType("int");

                    b.Property<short?>("GpFixedMovingDistance")
                        .HasColumnType("smallint")
                        .HasColumnName("GP_FixedMovingDistance");

                    b.Property<short?>("GpStopTrackingPeriod")
                        .HasColumnType("smallint")
                        .HasColumnName("GP_StopTrackingPeriod");

                    b.Property<short?>("GrOfflineTrackingPeriod")
                        .HasColumnType("smallint")
                        .HasColumnName("GR_OfflineTrackingPeriod");

                    b.Property<int?>("Line")
                        .HasColumnType("int");

                    b.Property<string>("Mission")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<short?>("OverspeedThreshold")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("PrimaryEndDateTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("PrimaryStartDateTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("RealEndDateTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("RealStartDateTime")
                        .HasColumnType("datetime");

                    b.Property<double>("SourceLatitude")
                        .HasColumnType("float");

                    b.Property<double>("SourceLongitude")
                        .HasColumnType("float");

                    b.Property<string>("SourceName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("((1))")
                        .UseCollation("French_CI_AS");

                    b.Property<short?>("TrackingPeriod")
                        .HasColumnType("smallint");

                    b.Property<int>("TrackingTarget")
                        .HasColumnType("int");

                    b.Property<int?>("WayDistanceThreshold")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Driver");

                    b.HasIndex("Equipment");

                    b.HasIndex("GeometricShape");

                    b.HasIndex("TrackingTarget");

                    b.ToTable("Trip", (string)null);
                });

            modelBuilder.Entity("Domain.models.TripOfCustomer", b =>
                {
                    b.Property<double>("DestinationLatitude")
                        .HasColumnType("float");

                    b.Property<double>("DestinationLongitude")
                        .HasColumnType("float");

                    b.Property<string>("DestinationName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<int>("Distance")
                        .HasColumnType("int");

                    b.Property<int?>("Driver")
                        .HasColumnType("int");

                    b.Property<string>("Equipment")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<int?>("ExternalId")
                        .HasColumnType("int");

                    b.Property<int?>("ExternalId2")
                        .HasColumnType("int");

                    b.Property<int?>("GeometricShape")
                        .HasColumnType("int");

                    b.Property<short?>("GpFixedMovingDistance")
                        .HasColumnType("smallint")
                        .HasColumnName("GP_FixedMovingDistance");

                    b.Property<short?>("GpStopTrackingPeriod")
                        .HasColumnType("smallint")
                        .HasColumnName("GP_StopTrackingPeriod");

                    b.Property<short?>("GrOfflineTrackingPeriod")
                        .HasColumnType("smallint")
                        .HasColumnName("GR_OfflineTrackingPeriod");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Line")
                        .HasColumnType("int");

                    b.Property<string>("Mission")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<short?>("OverspeedThreshold")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("PrimaryEndDateTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("PrimaryStartDateTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("RealEndDateTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("RealStartDateTime")
                        .HasColumnType("datetime");

                    b.Property<double>("SourceLatitude")
                        .HasColumnType("float");

                    b.Property<double>("SourceLongitude")
                        .HasColumnType("float");

                    b.Property<string>("SourceName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .UseCollation("French_CI_AS");

                    b.Property<short?>("TrackingPeriod")
                        .HasColumnType("smallint");

                    b.Property<int>("TrackingTarget")
                        .HasColumnType("int");

                    b.Property<int?>("WayDistanceThreshold")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("TripOfCustomer", (string)null);
                });

            modelBuilder.Entity("Domain.models.Way", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Way", (string)null);
                });

            modelBuilder.Entity("Domain.models.Wt", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .UseCollation("French_CI_AS");

                    b.Property<int?>("Customer")
                        .HasColumnType("int");

                    b.Property<string>("Dblogin")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DBLogin")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("Dbname")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DBName")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("Dbpassword")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DBPassword")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("Dbserver")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DBServer")
                        .UseCollation("French_CI_AS");

                    b.Property<DateTime?>("FirstExecutionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Hcsaddress")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("HCSAddress")
                        .UseCollation("French_CI_AS");

                    b.Property<int?>("Hcsport")
                        .HasColumnType("int")
                        .HasColumnName("HCSPort");

                    b.Property<DateTime?>("LastExecutionDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("LicensePeriod")
                        .HasColumnType("int");

                    b.Property<string>("MachineName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.Property<string>("Version")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .UseCollation("French_CI_AS");

                    b.HasKey("Id")
                        .HasName("PK_WTId");

                    b.ToTable("WT", (string)null);
                });

            modelBuilder.Entity("SmsmailConfigMail", b =>
                {
                    b.Property<int>("SmsmailConfig")
                        .HasColumnType("int")
                        .HasColumnName("SMSMailConfig");

                    b.Property<int>("Mail")
                        .HasColumnType("int");

                    b.HasKey("SmsmailConfig", "Mail")
                        .HasName("PK_SMSMailConfig_MAIL_1");

                    b.HasIndex("Mail");

                    b.ToTable("SMSMailConfig_MAIL", (string)null);
                });

            modelBuilder.Entity("SmsmailConfigTellNumber", b =>
                {
                    b.Property<int>("SmsmailConfig")
                        .HasColumnType("int")
                        .HasColumnName("SMSMailConfig");

                    b.Property<int>("TelNumber")
                        .HasColumnType("int");

                    b.HasKey("SmsmailConfig", "TelNumber");

                    b.HasIndex("TelNumber");

                    b.ToTable("SMSMailConfig_TellNumber", (string)null);
                });

            modelBuilder.Entity("AccountDepartment", b =>
                {
                    b.HasOne("Domain.models.Account", null)
                        .WithMany()
                        .HasForeignKey("Account")
                        .IsRequired()
                        .HasConstraintName("FK_Account_Department_Account");

                    b.HasOne("Domain.models.Department", null)
                        .WithMany()
                        .HasForeignKey("Department")
                        .IsRequired()
                        .HasConstraintName("FK_Account_Department_Department");
                });

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.HasOne("Domain.models.AspNetRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AspNetUserRoles_dbo.AspNetRoles_RoleId");

                    b.HasOne("Domain.models.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AspNetUserRoles_dbo.AspNetUsers_UserId");
                });

            modelBuilder.Entity("Domain.models.Account", b =>
                {
                    b.HasOne("Domain.models.Customer", "CustomerNavigation")
                        .WithMany("Accounts")
                        .HasForeignKey("Customer")
                        .IsRequired()
                        .HasConstraintName("FK_Account_Customer");

                    b.Navigation("CustomerNavigation");
                });

            modelBuilder.Entity("Domain.models.AccountEquipment", b =>
                {
                    b.HasOne("Domain.models.Account", "AccountNavigation")
                        .WithMany("AccountEquipments")
                        .HasForeignKey("Account")
                        .IsRequired()
                        .HasConstraintName("FK__Account_E__Accou__1C247F71");

                    b.Navigation("AccountNavigation");
                });

            modelBuilder.Entity("Domain.models.AccountPage", b =>
                {
                    b.HasOne("Domain.models.Account", "AccountNavigation")
                        .WithMany("AccountPages")
                        .HasForeignKey("Account")
                        .IsRequired()
                        .HasConstraintName("FK_Account_Account_Page");

                    b.Navigation("AccountNavigation");
                });

            modelBuilder.Entity("Domain.models.AspNetUserClaim", b =>
                {
                    b.HasOne("Domain.models.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AspNetUserClaims_dbo.AspNetUsers_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.models.AspNetUserLogin", b =>
                {
                    b.HasOne("Domain.models.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.models.Car", b =>
                {
                    b.HasOne("Domain.models.TrackingTarget", "IdNavigation")
                        .WithOne("Car")
                        .HasForeignKey("Domain.models.Car", "Id")
                        .IsRequired()
                        .HasConstraintName("FK_Car_TrackingTarget");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("Domain.models.Department", b =>
                {
                    b.HasOne("Domain.models.Customer", "CustomerNavigation")
                        .WithMany("Departments")
                        .HasForeignKey("Customer")
                        .IsRequired()
                        .HasConstraintName("FK_Department_Customer");

                    b.Navigation("CustomerNavigation");
                });

            modelBuilder.Entity("Domain.models.Driver", b =>
                {
                    b.HasOne("Domain.models.Department", "DepartmentNavigation")
                        .WithMany("Drivers")
                        .HasForeignKey("Department")
                        .IsRequired()
                        .HasConstraintName("FK_Driver_Department");

                    b.Navigation("DepartmentNavigation");
                });

            modelBuilder.Entity("Domain.models.DriverEquipmentCode", b =>
                {
                    b.HasOne("Domain.models.Driver", "DriverNavigation")
                        .WithMany("DriverEquipmentCodes")
                        .HasForeignKey("Driver")
                        .HasConstraintName("FK_DriverEquipmentCode_Driver");

                    b.HasOne("Domain.models.Equipment", "EquipmentNavigation")
                        .WithMany("DriverEquipmentCodes")
                        .HasForeignKey("Equipment")
                        .IsRequired()
                        .HasConstraintName("FK_DriverCode_Equipment");

                    b.Navigation("DriverNavigation");

                    b.Navigation("EquipmentNavigation");
                });

            modelBuilder.Entity("Domain.models.Equipment", b =>
                {
                    b.HasOne("Domain.models.Customer", "CustomerNavigation")
                        .WithMany("Equipment")
                        .HasForeignKey("Customer")
                        .HasConstraintName("FK_Equipment_Customer");

                    b.Navigation("CustomerNavigation");
                });

            modelBuilder.Entity("Domain.models.Gaequipment", b =>
                {
                    b.HasOne("Domain.models.Equipment", "SerialNumberNavigation")
                        .WithOne("Gaequipment")
                        .HasForeignKey("Domain.models.Gaequipment", "SerialNumber")
                        .IsRequired()
                        .HasConstraintName("FK_GAEquipment_Equipment");

                    b.Navigation("SerialNumberNavigation");
                });

            modelBuilder.Entity("Domain.models.GeofenceArea", b =>
                {
                    b.HasOne("Domain.models.Grequipment", "EquipmentNavigation")
                        .WithMany("GeofenceAreas")
                        .HasForeignKey("Equipment")
                        .IsRequired()
                        .HasConstraintName("FK_GeofenceArea_Equipment");

                    b.Navigation("EquipmentNavigation");
                });

            modelBuilder.Entity("Domain.models.GeofenceCircle", b =>
                {
                    b.HasOne("Domain.models.Equipment", "EquipmentNavigation")
                        .WithMany("GeofenceCircles")
                        .HasForeignKey("Equipment")
                        .IsRequired()
                        .HasConstraintName("FK_GeofenceCircle_Equipments");

                    b.Navigation("EquipmentNavigation");
                });

            modelBuilder.Entity("Domain.models.GeofenceRectangle", b =>
                {
                    b.HasOne("Domain.models.Gpequipment", "EquipmentNavigation")
                        .WithMany("GeofenceRectangles")
                        .HasForeignKey("Equipment")
                        .IsRequired()
                        .HasConstraintName("FK_GeofenceRectangle_Equipment");

                    b.Navigation("EquipmentNavigation");
                });

            modelBuilder.Entity("Domain.models.GeofenceRectangleNew", b =>
                {
                    b.HasOne("Domain.models.Gxequipment", "EquipmentNavigation")
                        .WithMany("GeofenceRectangleNews")
                        .HasForeignKey("Equipment")
                        .IsRequired()
                        .HasConstraintName("FK_GeofenceRectangleNew_Equipment1");

                    b.Navigation("EquipmentNavigation");
                });

            modelBuilder.Entity("Domain.models.Glequipment", b =>
                {
                    b.HasOne("Domain.models.Equipment", "SerialNumberNavigation")
                        .WithOne("Glequipment")
                        .HasForeignKey("Domain.models.Glequipment", "SerialNumber")
                        .IsRequired()
                        .HasConstraintName("FK_GLEquipment_Equipment1");

                    b.Navigation("SerialNumberNavigation");
                });

            modelBuilder.Entity("Domain.models.Gpequipment", b =>
                {
                    b.HasOne("Domain.models.Equipment", "SerialNumberNavigation")
                        .WithOne("Gpequipment")
                        .HasForeignKey("Domain.models.Gpequipment", "SerialNumber")
                        .IsRequired()
                        .HasConstraintName("FK_GPEquipment_Equipment");

                    b.Navigation("SerialNumberNavigation");
                });

            modelBuilder.Entity("Domain.models.Grequipment", b =>
                {
                    b.HasOne("Domain.models.Equipment", "SerialNumberNavigation")
                        .WithOne("Grequipment")
                        .HasForeignKey("Domain.models.Grequipment", "SerialNumber")
                        .IsRequired()
                        .HasConstraintName("FK_GREquipment_Equipment1");

                    b.Navigation("SerialNumberNavigation");
                });

            modelBuilder.Entity("Domain.models.Message", b =>
                {
                    b.HasOne("Domain.models.Equipment", "EquipmentNavigation")
                        .WithMany("Messages")
                        .HasForeignKey("Equipment")
                        .IsRequired()
                        .HasConstraintName("FK_Message_Equipment");

                    b.Navigation("EquipmentNavigation");
                });

            modelBuilder.Entity("Domain.models.Mission", b =>
                {
                    b.HasOne("Domain.models.Equipment", "EquipmentNavigation")
                        .WithMany("Missions")
                        .HasForeignKey("Equipment")
                        .HasConstraintName("FK_Mission1_Equipment");

                    b.Navigation("EquipmentNavigation");
                });

            modelBuilder.Entity("Domain.models.PersonneGp", b =>
                {
                    b.HasOne("Domain.models.TrackingTarget", "IdNavigation")
                        .WithOne("PersonneGp")
                        .HasForeignKey("Domain.models.PersonneGp", "Id")
                        .IsRequired()
                        .HasConstraintName("FK_PersonneGps_TrackingTarget");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("Domain.models.Place", b =>
                {
                    b.HasOne("Domain.models.Account", "AccountNavigation")
                        .WithMany("Places")
                        .HasForeignKey("Account")
                        .IsRequired()
                        .HasConstraintName("FK_Place_Account");

                    b.HasOne("Domain.models.StandardPlace", "IdNavigation")
                        .WithOne("Place")
                        .HasForeignKey("Domain.models.Place", "Id")
                        .IsRequired()
                        .HasConstraintName("FK_Place_StandardPlace");

                    b.Navigation("AccountNavigation");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("Domain.models.Point", b =>
                {
                    b.HasOne("Domain.models.GeometricShape", "GeometricShapeNavigation")
                        .WithMany("Points")
                        .HasForeignKey("GeometricShape")
                        .IsRequired()
                        .HasConstraintName("FK_WayPoint_GeometricShape");

                    b.Navigation("GeometricShapeNavigation");
                });

            modelBuilder.Entity("Domain.models.Polygon", b =>
                {
                    b.HasOne("Domain.models.GeometricShape", "IdNavigation")
                        .WithOne("Polygon")
                        .HasForeignKey("Domain.models.Polygon", "Id")
                        .IsRequired()
                        .HasConstraintName("FK_Polygon_GeometricShape");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("Domain.models.PreviousPassword", b =>
                {
                    b.HasOne("Domain.models.AspNetUser", "User")
                        .WithMany("PreviousPasswords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.PreviousPasswords_dbo.AspNetUsers_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.models.StatisticHour", b =>
                {
                    b.HasOne("Domain.models.Car", "TrackingTargetNavigation")
                        .WithMany("StatisticHours")
                        .HasForeignKey("TrackingTarget")
                        .IsRequired()
                        .HasConstraintName("FK_StatisticHour_Car");

                    b.Navigation("TrackingTargetNavigation");
                });

            modelBuilder.Entity("Domain.models.StopRun", b =>
                {
                    b.HasOne("Domain.models.Car", "TrackingTargetNavigation")
                        .WithMany("StopRuns")
                        .HasForeignKey("TrackingTarget")
                        .IsRequired()
                        .HasConstraintName("FK_Table_2_Car");

                    b.Navigation("TrackingTargetNavigation");
                });

            modelBuilder.Entity("Domain.models.TrackingTarget", b =>
                {
                    b.HasOne("Domain.models.Department", "DepartmentNavigation")
                        .WithMany("TrackingTargets")
                        .HasForeignKey("Department")
                        .IsRequired()
                        .HasConstraintName("FK_TrackingTarget_Department");

                    b.Navigation("DepartmentNavigation");
                });

            modelBuilder.Entity("Domain.models.Trip", b =>
                {
                    b.HasOne("Domain.models.Driver", "DriverNavigation")
                        .WithMany("Trips")
                        .HasForeignKey("Driver")
                        .HasConstraintName("FK_Trip_Driver");

                    b.HasOne("Domain.models.Equipment", "EquipmentNavigation")
                        .WithMany("Trips")
                        .HasForeignKey("Equipment")
                        .IsRequired()
                        .HasConstraintName("FK_Trip_Equipment1");

                    b.HasOne("Domain.models.GeometricShape", "GeometricShapeNavigation")
                        .WithMany("Trips")
                        .HasForeignKey("GeometricShape")
                        .HasConstraintName("FK_Trip_GeometricShape");

                    b.HasOne("Domain.models.TrackingTarget", "TrackingTargetNavigation")
                        .WithMany("Trips")
                        .HasForeignKey("TrackingTarget")
                        .IsRequired()
                        .HasConstraintName("FK_Trip_Equipment");

                    b.Navigation("DriverNavigation");

                    b.Navigation("EquipmentNavigation");

                    b.Navigation("GeometricShapeNavigation");

                    b.Navigation("TrackingTargetNavigation");
                });

            modelBuilder.Entity("Domain.models.Way", b =>
                {
                    b.HasOne("Domain.models.GeometricShape", "IdNavigation")
                        .WithOne("Way")
                        .HasForeignKey("Domain.models.Way", "Id")
                        .IsRequired()
                        .HasConstraintName("FK_Way_GeometricShape");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("SmsmailConfigMail", b =>
                {
                    b.HasOne("Domain.models.Mail", null)
                        .WithMany()
                        .HasForeignKey("Mail")
                        .IsRequired()
                        .HasConstraintName("FK__SMSMailCon__Mail__57E03940");

                    b.HasOne("Domain.models.SmsmailConfig", null)
                        .WithMany()
                        .HasForeignKey("SmsmailConfig")
                        .IsRequired()
                        .HasConstraintName("FK__SMSMailCo__SMSMa__56EC1507");
                });

            modelBuilder.Entity("SmsmailConfigTellNumber", b =>
                {
                    b.HasOne("Domain.models.SmsmailConfig", null)
                        .WithMany()
                        .HasForeignKey("SmsmailConfig")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__SMSMailCo__SMSMa__5ABCA5EB");

                    b.HasOne("Domain.models.TelNumber", null)
                        .WithMany()
                        .HasForeignKey("TelNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__SMSMailCo__TelNu__5BB0CA24");
                });

            modelBuilder.Entity("Domain.models.Account", b =>
                {
                    b.Navigation("AccountEquipments");

                    b.Navigation("AccountPages");

                    b.Navigation("Places");
                });

            modelBuilder.Entity("Domain.models.AspNetUser", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("PreviousPasswords");
                });

            modelBuilder.Entity("Domain.models.Car", b =>
                {
                    b.Navigation("StatisticHours");

                    b.Navigation("StopRuns");
                });

            modelBuilder.Entity("Domain.models.Customer", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Departments");

                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("Domain.models.Department", b =>
                {
                    b.Navigation("Drivers");

                    b.Navigation("TrackingTargets");
                });

            modelBuilder.Entity("Domain.models.Driver", b =>
                {
                    b.Navigation("DriverEquipmentCodes");

                    b.Navigation("Trips");
                });

            modelBuilder.Entity("Domain.models.Equipment", b =>
                {
                    b.Navigation("DriverEquipmentCodes");

                    b.Navigation("Gaequipment");

                    b.Navigation("GeofenceCircles");

                    b.Navigation("Glequipment");

                    b.Navigation("Gpequipment");

                    b.Navigation("Grequipment");

                    b.Navigation("Messages");

                    b.Navigation("Missions");

                    b.Navigation("Trips");
                });

            modelBuilder.Entity("Domain.models.GeometricShape", b =>
                {
                    b.Navigation("Points");

                    b.Navigation("Polygon");

                    b.Navigation("Trips");

                    b.Navigation("Way");
                });

            modelBuilder.Entity("Domain.models.Gpequipment", b =>
                {
                    b.Navigation("GeofenceRectangles");
                });

            modelBuilder.Entity("Domain.models.Grequipment", b =>
                {
                    b.Navigation("GeofenceAreas");
                });

            modelBuilder.Entity("Domain.models.Gxequipment", b =>
                {
                    b.Navigation("GeofenceRectangleNews");
                });

            modelBuilder.Entity("Domain.models.StandardPlace", b =>
                {
                    b.Navigation("Place");
                });

            modelBuilder.Entity("Domain.models.TrackingTarget", b =>
                {
                    b.Navigation("Car");

                    b.Navigation("PersonneGp");

                    b.Navigation("Trips");
                });
#pragma warning restore 612, 618
        }
    }
}
